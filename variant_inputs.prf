(variant_inputs
 (var_inputs_cdr 0
  (var_inputs_cdr-1 nil 3893313833
   ("" (skeep)
    (("" (expand "var_inputs_cond?")
      (("" (flatten)
        (("" (assert)
          (("" (prop)
            (("1" (use "inst_step_match_condition_cdr")
              (("1" (assert) nil nil)) nil)
             ("2" (hide-all-but (-6 1)) (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but (-8 1)) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_context type-eq-decl nil freshness nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_match_condition_cdr formula-decl nil inst_step nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (lhs const-decl "args" unification nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil))
   shostak))
 (var_inputs_no_effect_lhs 0
  (var_inputs_no_effect_lhs-1 nil 3893357741
   ("" (skeep)
    (("" (expand "var_inputs_cond?")
      (("" (flatten)
        (("" (hide-all-but (-6 -5 1))
          (("" (use "subs_no_effect_t")
            (("" (assert)
              (("" (expand ("disjoint?" "subset?"))
                (("" (expand "empty?")
                  (("" (skeep)
                    (("" (inst?)
                      (("" (inst?) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_cond? const-decl "bool" variant_inputs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (union const-decl "set" sets nil)
    (lhs const-decl "args" unification nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil)
    (renaming type-eq-decl nil substitution nil)
    (subs_no_effect_t formula-decl nil substitution nil))
   shostak))
 (var_inputs_disjoint_img 0
  (var_inputs_disjoint_img-1 nil 3893665535
   ("" (skeep)
    (("" (expand "var_inputs_cond?" -1)
      (("" (flatten)
        (("" (expand "disjoint?" 1)
          (("" (expand "empty?" 1)
            (("" (skeep)
              (("" (expand ("member" "intersection") -11)
                (("" (flatten)
                  (("" (inst -9 "x")
                    (("" (assert)
                      (("" (split -9)
                        (("1" (hide-all-but (-9 -11 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (hide-all-but (-1 -6 -12))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_cond? const-decl "bool" variant_inputs nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (var_inputs_option_rhs 0
  (var_inputs_option_rhs-1 nil 3893357904
   ("" (skeep)
    (("" (expand "var_inputs_cond?" -1)
      (("" (flatten)
        (("" (delete -10)
          (("" (expand "match_condition?" -1)
            (("" (hide -9)
              (("" (expand "disjoint?" 1)
                (("" (expand "empty?" 1)
                  (("" (skeep)
                    (("" (expand ("member" "intersection") -9)
                      (("" (flatten)
                        (("" (inst -1 "x")
                          (("" (case "NOT member(x, PV)")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (skolem -1 ("up" "i"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "i = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth" -3)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "inst_ptc?" -5)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "member"
                                                     -4)
                                                    (("1"
                                                      (split -4)
                                                      (("1"
                                                        (expand
                                                         "subset?"
                                                         -5)
                                                        (("1"
                                                          (inst -5 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -15)
                                                              (("1"
                                                                (expand
                                                                 "vars"
                                                                 -15)
                                                                (("1"
                                                                  (expand
                                                                   "singleton"
                                                                   -15)
                                                                  (("1"
                                                                    (replace
                                                                     -15
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -5 "0")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" 2)
                                            (("2"
                                              (expand "member" 2)
                                              (("2"
                                                (expand "vars" 2)
                                                (("2"
                                                  (expand "union" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-9 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -3 -6 -10))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_cond? const-decl "bool" variant_inputs nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (rhs const-decl "args" unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" unification nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   shostak))
 (var_inputs_option_rhs2 0
  (var_inputs_option_rhs2-1 nil 3893876203
   ("" (skeep)
    (("" (expand "var_inputs_cond?" -1)
      (("" (flatten)
        (("" (expand "match_condition?" -1)
          (("" (hide -9)
            (("" (expand "subset?" 1)
              (("" (skeep)
                (("" (inst -1 "x")
                  (("" (split -1)
                    (("1" (skolem -1 ("up" "i"))
                      (("1" (case "i = 0")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (expand "nth" -3)
                              (("1"
                                (replace -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "member" -4)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (expand "subset?" -11)
                                        (("1"
                                          (inst -11 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "lhs" 1)
                                              (("1"
                                                (expand "first_proj" 1)
                                                (("1"
                                                  (expand "vars" 1)
                                                  (("1"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -16 -7 1))
                                          (("2"
                                            (replace -1 :dir rl)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst -5 "0")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-9 1)) (("2" (grind) nil nil))
                      nil)
                     ("3" (hide-all-but (-1 -2 1))
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_cond? const-decl "bool" variant_inputs nil)
    (subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (rhs const-decl "args" unification nil)
    (length def-decl "nat" list_props nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lhs const-decl "args" unification nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (member const-decl "bool" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (var_inputs_option_rhs_ren 0
  (var_inputs_option_rhs_ren-1 nil 3893667297
   ("" (skeep)
    (("" (lemma "var_inputs_option_rhs")
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (case "member(V(s), dom(rho))")
              (("1" (typepred "rho")
                (("1" (expand "renaming?" -1)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (case "var?(subs(rho)(s))")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (use "vars_subs_t")
                              (("1"
                                (lemma "renaming_susp_var")
                                (("1"
                                  (inst -1 "V(s)" "p(s)" "rho")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "term_times_eta")
                                        (("1"
                                          (inst -1 "s")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -3 -4)
                                              (("1"
                                                (expand "subset?" -4)
                                                (("1"
                                                  (inst
                                                   -4
                                                   "V(subs(rho)(V(s)))")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (use
                                                           "renaming_var3")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (use
                                                                 "var_inputs_disjoint_img")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -3
                                                                      -7
                                                                      -13))
                                                                    (("1"
                                                                      (expand
                                                                       "var_inputs_cond?"
                                                                       -4)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -2
                                                                            -3
                                                                            -5))
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "disjoint?"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "vars"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "singleton"
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "renaming_var3")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "inst_ptc?" 1)
                              (("2"
                                (expand "inst_ptc?" -5)
                                (("2"
                                  (use "var_inputs_no_effect_lhs")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 4)
                          (("2" (use "renaming_susp_var2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 4)
                (("2" (expand "disjoint?" 3)
                  (("2" (expand "empty?")
                    (("2" (skeep)
                      (("2" (expand ("member" "intersection") -4)
                        (("2" (flatten)
                          (("2" (expand "member" -5)
                            (("2" (expand "vars" -5)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil)
    (renaming type-eq-decl nil substitution nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (rhs const-decl "args" unification nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" unification nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (lhs const-decl "args" unification nil)
    (equal_syn? const-decl "bool" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (renaming_susp_var formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (term_times_eta formula-decl nil term_adt nil)
    (subset? const-decl "bool" sets nil)
    (var_inputs_disjoint_img formula-decl nil variant_inputs nil)
    (empty? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (renaming_var3 formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (vars_subs_t formula-decl nil substitution nil)
    (var_inputs_no_effect_lhs formula-decl nil variant_inputs nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (renaming_susp_var2 formula-decl nil substitution nil)
    (member const-decl "bool" sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (var_inputs_option_rhs formula-decl nil variant_inputs nil))
   shostak))
 (var_inputs_inst_step_aux 0
  (var_inputs_inst_step_aux-1 nil 3893619798
   ("" (skeep)
    (("" (expand "inst_step" 3 1)
      (("" (assert)
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1"
                (name-replace "delta"
                 "cons((V(s), ext(reverse(p(s)))(t)), null)")
                (("1" (reveal -1)
                  (("1" (use "fresh_subs?_subs_no_effect")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (replace -1 1 :dir rl)
                            (("2" (use "dom_basic_sub2")
                              (("2"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide-all-but (-3 1 4))
                                    (("1"
                                      (expand "var_inputs_cond?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but (-4 -5 1 2))
                                          (("1"
                                            (expand "disjoint?")
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   ("member"
                                                    "intersection")
                                                   -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       ("member "
                                                        "singleton")
                                                       -1)
                                                      (("1"
                                                        (skolem 1 "y")
                                                        (("1"
                                                          (reveal -9)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "V(s)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 1)
                (("2" (expand "inst_ptc?" -4)
                  (("2" (expand "subset?" -4)
                    (("2" (inst -4 "V(s)") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (fresh_subs?_subs_no_effect formula-decl nil fresh_subs nil)
    (fresh_context type-eq-decl nil freshness nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (subset? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (var_inputs_inst_step_aux2 0
  (var_inputs_inst_step_aux2-1 nil 3893874745
   ("" (skeep)
    (("" (expand "inst_step" 3 1)
      (("" (assert)
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1"
                (name-replace "delta"
                 "cons((V(s), ext(reverse(p(s)))(t)), null)")
                (("1" (reveal -1)
                  (("1" (use "fresh_subs?_subs_no_effect")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (replace -1 1 :dir rl)
                            (("2" (use "dom_basic_sub2")
                              (("2"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide-all-but (-4 -3 1 4))
                                    (("1"
                                      (expand "var_inputs_cond?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but (-11 -4 1 2))
                                          (("1"
                                            (expand "disjoint?")
                                            (("1"
                                              (expand
                                               ("empty?" "subset?"))
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (skolem 1 "y")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 1)
                (("2" (expand "inst_ptc?" -4)
                  (("2" (expand "subset?" -4)
                    (("2" (inst -4 "V(s)") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (fresh_subs?_subs_no_effect formula-decl nil fresh_subs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (var_inputs_inst_step_aux_ren_TCC1 0
  (var_inputs_inst_step_aux_ren_TCC1-1 nil 3893665534
   ("" (subtype-tcc) nil nil) nil nil
   (var_inputs_inst_step_aux_ren subtype
    "substitution.subs(variant_inputs.rho)(variant_inputs.s)"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (var_inputs_inst_step_aux_ren 0
  (var_inputs_inst_step_aux_ren-1 nil 3893691818
   ("" (skeep)
    (("" (use "var_inputs_option_rhs_ren")
      (("" (assert)
        (("" (flatten)
          (("" (use "var_inputs_no_effect_lhs")
            (("" (assert)
              (("" (replace -1)
                (("" (expand "inst_step" 3 1)
                  (("" (lift-if)
                    (("" (split 3)
                      (("1" (flatten)
                        (("1"
                          (name-replace "del"
                           "cons((V(subs(rho)(s)), ext(reverse(p(subs(rho)(s))))(t)), null)")
                          (("1" (use "fresh_subs?_subs_no_effect")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 3 2 4)
                                  (("2"
                                    (expand "disjoint?" 1)
                                    (("2"
                                      (expand "empty?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand
                                           ("member" "intersection")
                                           -1)
                                          (("2"
                                            (prop)
                                            (("2"
                                              (reveal -2)
                                              (("2"
                                                (use "dom_basic_sub2")
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (replace -1 -3)
                                                      (("1"
                                                        (expand
                                                         ("member"
                                                          "singleton")
                                                         -3)
                                                        (("1"
                                                          (lemma
                                                           "vars_subs_t")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "rho"
                                                             "s")
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -5
                                                                          -9))
                                                                        (("1"
                                                                          (use
                                                                           "var_inputs_disjoint_img")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "var_inputs_cond?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -13
                                                                                    -7
                                                                                    -13))
                                                                                  (("1"
                                                                                    (expand
                                                                                     ("subset?"
                                                                                      "disjoint?"))
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "var_inputs_option_rhs")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "disjoint?"
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "empty?"
                                                                                 2)
                                                                                (("2"
                                                                                  (skolem
                                                                                   2
                                                                                   "y")
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("member"
                                                                                      "intersection")
                                                                                     -12)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         ("member"
                                                                                          "vars")
                                                                                         -13)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "singleton"
                                                                                             -13)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -13)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vars"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "singleton"
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-7
                                                                                                          -12
                                                                                                          -11))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "var_inputs_cond?"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -5
                                                                                                                -6
                                                                                                                -12))
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     ("member"
                                                                      "vars")
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand
                                                         "member"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "emptyset"
                                                           -3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 1)
                          (("2" (expand "inst_ptc?" -4)
                            (("2" (expand "subset?" -4)
                              (("2"
                                (inst -4 "V(subs(rho)(s))")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_option_rhs_ren formula-decl nil variant_inputs nil)
    (renaming type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (var_inputs_disjoint_img formula-decl nil variant_inputs nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (var_inputs_option_rhs formula-decl nil variant_inputs nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (fresh_subs?_subs_no_effect formula-decl nil fresh_subs nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (var_inputs_no_effect_lhs formula-decl nil variant_inputs nil))
   shostak))
 (var_inputs_inst_step_aux_ren2_TCC1 0
  (var_inputs_inst_step_aux_ren2_TCC1-1 nil 3893875062
   ("" (subtype-tcc) nil nil) nil nil
   (var_inputs_inst_step_aux_ren2 subtype
    "substitution.subs(variant_inputs.rho)(variant_inputs.s)"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (var_inputs_inst_step_aux_ren2 0
  (var_inputs_inst_step_aux_ren2-1 nil 3893875063
   ("" (skeep)
    (("" (use "var_inputs_option_rhs2")
      (("" (assert)
        (("" (use "var_inputs_option_rhs_ren")
          (("" (assert)
            (("" (case "NOT disjoint?(dom(rho), vars(s))")
              (("1" (assert)
                (("1" (use "var_inputs_inst_step_aux_ren")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (hide -2)
                  (("2" (use "var_inputs_no_effect_lhs")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (lemma "subs_no_effect_t")
                          (("2" (inst -1 "rho" "s")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2"
                                  (use "var_inputs_inst_step_aux2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((var_inputs_option_rhs2 formula-decl nil variant_inputs nil)
    (renaming type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (var_inputs_option_rhs_ren formula-decl nil variant_inputs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (var_inputs_inst_step_aux_ren formula-decl nil variant_inputs nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (var_inputs_inst_step_aux2 formula-decl nil variant_inputs nil)
    (var_inputs_no_effect_lhs formula-decl nil variant_inputs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (var_inputs_equal_syn_aux_TCC1 0
  (var_inputs_equal_syn_aux_TCC1-1 nil 3893706083
   ("" (subtype-tcc) nil nil) nil nil
   (var_inputs_equal_syn_aux subtype "variant_inputs.s"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (var_inputs_equal_syn_aux_TCC2 0
  (var_inputs_equal_syn_aux_TCC2-1 nil 3893706083
   ("" (subtype-tcc) nil nil) nil nil
   (var_inputs_equal_syn_aux subtype
    "substitution.subs(variant_inputs.rho)(variant_inputs.s)"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (var_inputs_equal_syn_aux 0
  (var_inputs_equal_syn_aux-1 nil 3893706084
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        ((""
          (name-replace "sig1_"
           "cons((V(subs(rho)(s)), ext(reverse(p(subs(rho)(s))))(subs(rho)(t))), null)")
          ((""
            (name-replace "sig1"
             "cons((V(s), ext(reverse(p(s)))(t)), null)")
            (("" (reveal -1 -2)
              (("" (name-replace "Y" "V(s)")
                (("" (reveal -1)
                  (("" (name-replace "t1" "ext(reverse(p(s)))(t)")
                    (("" (reveal -1)
                      (("" (use "renaming_var3")
                        (("" (assert)
                          (("" (replace -1)
                            (("" (use "renaming_susp_var_ext")
                              ((""
                                (assert)
                                ((""
                                  (replace -1)
                                  ((""
                                    (hide -1)
                                    ((""
                                      (replace -2)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (lemma "renaming_equal_syn")
                                          ((""
                                            (inst
                                             -1
                                             "V1"
                                             "Y"
                                             "rho"
                                             "t1")
                                            ((""
                                              (assert)
                                              ((""
                                                (expand
                                                 "var_inputs_cond?"
                                                 -6)
                                                ((""
                                                  (flatten)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (prop)
                                                      ((""
                                                        (hide-all-but
                                                         (-3
                                                          -13
                                                          -16
                                                          1))
                                                        ((""
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((renaming_var3 formula-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (renaming_equal_syn formula-decl nil substitution nil)
    (renaming_susp_var_ext formula-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (renaming type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (var_inputs_equal_syn 0
  (var_inputs_equal_syn-1 nil 3893318685
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "sig1" "inst_step(PV, G, t, s)`2")
        ((""
          (name-replace "sig1_"
           "inst_step(PV, G, subs(rho)(t), subs(rho)(s))`2")
          (("" (flatten)
            (("" (reveal -1 -2)
              (("" (use "var_inputs_no_effect_lhs")
                (("" (assert)
                  (("" (use "var_inputs_option_rhs")
                    (("" (assert)
                      (("" (case "disjoint?(dom(rho), vars(s))")
                        (("1" (hide -2)
                          (("1" (lemma "subs_no_effect_t")
                            (("1" (inst -1 "rho" "s")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "inst_step" -5)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "inst_step"
                                                       -7)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -7
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (use
                                                             "renaming_var3")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -8)
                                                                (("1"
                                                                  (lemma
                                                                   "renaming_susp_var_ext")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "rho"
                                                                     "s"
                                                                     "t")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -8
                                                                         -9
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3)
                                                                            (("1"
                                                                              (name-replace
                                                                               "t1"
                                                                               "ext(reverse(p(s)))(t)")
                                                                              (("1"
                                                                                (reveal
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "renaming_equal_syn")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "V1"
                                                                                     "V(s)"
                                                                                     "rho"
                                                                                     "t1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_inputs_cond?"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "var_inputs_cond?"
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-15
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "subset?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "V(s)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "inst_step"
                                                       -6)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -6
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 4
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "append_null")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     4)
                                                                    (("2"
                                                                      (expand
                                                                       "equal_syn?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "inst_step"
                                                           -8)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split
                                                                 -8)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (name-replace
                                                                       "s1"
                                                                       "ext(reverse(p(t)))(s)")
                                                                      (("2"
                                                                        (reveal
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "renaming_var3")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "rho"
                                                                             "t")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 -3
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -10
                                                                                   -3
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -8
                                                                                     -3
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       -3)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "renaming_susp_var_ext")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "rho"
                                                                                           "t"
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "renaming_equal_syn")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "V1"
                                                                                                       "V(t)"
                                                                                                       "rho"
                                                                                                       "s1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "var_inputs_cond?"
                                                                                                           -10)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-5
                                                                                                                    -17
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "subset?"
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "inst_step"
                                                           -7)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split
                                                                 -7)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           5)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("2"
                                                                                (expand
                                                                                 "equal_syn?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "inst_step"
                                                       -6)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split -6)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -2
                                                                      5))
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "append_null")
                                                                            (("2"
                                                                              (expand
                                                                               "equal_syn?"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (name-replace
                                                           "s1"
                                                           "ext(reverse(p(t)))(s)")
                                                          (("1"
                                                            (reveal -1)
                                                            (("1"
                                                              (expand
                                                               "inst_step"
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -7
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     -8
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (use
                                                                       "renaming_var3")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "renaming_susp_var_ext")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "renaming_equal_syn")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "V1"
                                                                                       "V(t)"
                                                                                       "rho"
                                                                                       "s1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "var_inputs_cond?"
                                                                                               -9)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-4
                                                                                                -9
                                                                                                1))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_inputs_cond?"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -9
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "inst_step"
                                                           -6)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                5))
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "append_null")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "inst_step"
                                                       -6)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split -6)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  4))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "inst_step"
                                                   -5)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -5 3))
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             1
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "append_null")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (use "var_inputs_inst_step_aux")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (use
                                           "var_inputs_inst_step_aux_ren")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1 -5)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (use
                                                     "var_inputs_equal_syn_aux")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (var_inputs_no_effect_lhs formula-decl nil variant_inputs nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (var_inputs_option_rhs formula-decl nil variant_inputs nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (append def-decl "list[T]" list_props nil)
    (equal_syn? const-decl "bool" substitution nil)
    (append_null formula-decl nil list_props nil)
    (renaming_var3 formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (renaming_equal_syn formula-decl nil substitution nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (renaming_susp_var_ext formula-decl nil substitution nil)
    (var_inputs_inst_step_aux formula-decl nil variant_inputs nil)
    (var_inputs_equal_syn_aux formula-decl nil variant_inputs nil)
    (var_inputs_inst_step_aux_ren formula-decl nil variant_inputs nil)
    (renaming type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil))
   shostak))
 (var_inputs_equal_syn_unif_prb 0
  (var_inputs_equal_syn_unif_prb-1 nil 3893708259
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          ((""
            (name-replace "del_"
             "inst_step(PV, G, subs(rho)(t), subs(rho)(s))`2")
            (("" (reveal -1 -2)
              (("" (use "var_inputs_equal_syn")
                (("" (assert)
                  (("" (assert)
                    (("" (replace -3)
                      (("" (replace -2)
                        (("" (rewrite "apply_sub_sub_append")
                          (("" (rewrite "apply_sub_sub_append")
                            (("" (use "apply_sub_eq")
                              ((""
                                (assert)
                                ((""
                                  (expand "equal_syn?")
                                  ((""
                                    (skolem 1 "x")
                                    ((""
                                      (inst -1 "x")
                                      ((""
                                        (flatten)
                                        ((""
                                          (assert)
                                          ((""
                                            (expand
                                             "var_inputs_cond?"
                                             -4)
                                            ((""
                                              (flatten)
                                              ((""
                                                (hide-all-but
                                                 (-1 -11 2))
                                                (("" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (apply_sub_sub_append formula-decl nil unification nil)
    (apply_sub_eq formula-decl nil unification nil)
    (append def-decl "list[T]" list_props nil)
    (equal_syn? const-decl "bool" substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (var_inputs_cond? const-decl "bool" variant_inputs nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (var_inputs_equal_syn formula-decl nil variant_inputs nil)
    (renaming type-eq-decl nil substitution nil)
    (renaming? const-decl "bool" substitution nil))
   shostak))
 (var_inputs_equal_syn2 0
  (var_inputs_equal_syn2-1 nil 3893961179
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "delta_"
         "inst_step(PV, G, subs(rho)(t), subs(rho)(s))`2")
        (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
          (("" (reveal -1 -2)
            (("" (prop)
              (("" (case "subset?(vars(s), V)")
                (("1" (use "var_inputs_no_effect_lhs")
                  (("1" (assert)
                    (("1" (case "subs(rho)(s) = s")
                      (("1" (replace -1)
                        (("1" (replace -2)
                          (("1" (expand "var_inputs_cond?" -6)
                            (("1" (flatten)
                              (("1"
                                (replace -4)
                                (("1"
                                  (replace -5 :dir rl)
                                  (("1"
                                    (hide-all-but (-12 1))
                                    (("1"
                                      (use "equal_syn_append")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2" (use "subs_no_effect_t")
                          (("2" (assert)
                            (("2" (expand "var_inputs_cond?" -4)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-1 -8 1))
                                  (("2"
                                    (expand ("disjoint?" "subset?"))
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (skeep)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "var_inputs_option_rhs2")
                  (("2" (assert)
                    (("2" (use "var_inputs_inst_step_aux2")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (use
                                     "var_inputs_inst_step_aux_ren2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (var_inputs_inst_step_preservation 0
  (var_inputs_inst_step_preservation-1 nil 3893790832
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "G1" "inst_step(PV, G, t, s)`1")
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
            (("" (flatten)
              ((""
                (name-replace "del_"
                 "inst_step(PV, G, subs(rho)(t), subs(rho)(s))`2")
                (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
                  (("" (expand "var_inputs_cond?" -1)
                    (("" (flatten)
                      (("" (expand "var_inputs_cond?" 3)
                        (("" (assert)
                          (("" (case "subset?(vars(s), V)")
                            (("1" (prop)
                              (("1"
                                (use
                                 "inst_step_match_condition_apply_sub")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand ("del" "fai" "skp"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "G1" 1)
                                (("2"
                                  (hide-all-but (-1 -5 -7 1))
                                  (("2"
                                    (use "inst_step_vars_context_aux")
                                    (("2"
                                      (expand "subset?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst?)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (-1 -7 1))
                                (("3"
                                  (expand "subset?")
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (inst?)
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (rewrite "vars_args")
                                            (("3"
                                              (skolem -1 "t1")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "lhs" -1)
                                                  (("3"
                                                    (rewrite
                                                     "first_proj_mem")
                                                    (("3"
                                                      (skolem -1 "up")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (use
                                                           "apply_sub_unif_pair")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (skolem
                                                               -1
                                                               "up1")
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (replace
                                                                   -2)
                                                                  (("3"
                                                                    (expand
                                                                     "apply_sub"
                                                                     -4)
                                                                    (("3"
                                                                      (replace
                                                                       -4
                                                                       -5)
                                                                      (("3"
                                                                        (use
                                                                         "vars_subs_t")
                                                                        (("3"
                                                                          (expand
                                                                           "subset?")
                                                                          (("3"
                                                                            (inst?)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("3"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      2
                                                                                      3))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "del"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "inst_step_img")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ("member"
                                                                                                  "vars")
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "union"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "vars_args"
                                                                                     3)
                                                                                    (("2"
                                                                                      (inst
                                                                                       3
                                                                                       "up1`1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "lhs"
                                                                                           3)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "first_proj_mem"
                                                                                             3)
                                                                                            (("2"
                                                                                              (inst
                                                                                               3
                                                                                               "up1")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (assert)
                                (("4"
                                  (reveal -2 -4)
                                  (("4"
                                    (case
                                     "subs(rho)(t) = t AND subs(rho)(s) = s")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (use
                                                 "equal_syn_append")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "var_inputs_no_effect_lhs")
                                      (("2"
                                        (inst
                                         -1
                                         "FV"
                                         "G"
                                         "P"
                                         "PV"
                                         "V"
                                         "V1"
                                         "rho"
                                         "s"
                                         "sig"
                                         "sig_"
                                         "t")
                                        (("2"
                                          (case
                                           "var_inputs_cond?(G, cons((t, s), P), sig, V, PV, sig_, FV, rho, V1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "subs_no_effect_t")
                                              (("1"
                                                (inst -1 "rho" "s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-5 -10 1))
                                                    (("1"
                                                      (expand
                                                       ("disjoint?"
                                                        "subset?"))
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2 3 4 5)
                                            (("2"
                                              (expand
                                               "var_inputs_cond?"
                                               1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide -10 2 3)
                                (("5"
                                  (reveal -5)
                                  (("5"
                                    (use "apply_sub_vars")
                                    (("5"
                                      (expand "subset?" (-1 1))
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (inst?)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("5"
                                                (prop)
                                                (("1"
                                                  (use "inst_step_img")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -13 1))
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-1 -12 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "var_inputs_option_rhs2")
                              (("2"
                                (inst
                                 -1
                                 "FV"
                                 "G"
                                 "P"
                                 "PV"
                                 "V"
                                 "V1"
                                 "rho"
                                 "s"
                                 "sig"
                                 "sig_"
                                 "t")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "var_inputs_cond?(G, cons((t, s), P), sig, V, PV, sig_, FV, rho, V1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (reveal -6)
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (use
                                               "var_inputs_inst_step_aux2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 5)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               ("del"
                                                                "skp"
                                                                "fai"))
                                                              (("1"
                                                                (use
                                                                 "inst_step_match_condition_apply_sub")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "G1"
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-9
                                                                    1))
                                                                  (("2"
                                                                    (rewrite
                                                                     "vars_append_context")
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide
                                                             -14
                                                             -12
                                                             -13)
                                                            (("3"
                                                              (hide -1)
                                                              (("3"
                                                                (expand
                                                                 "subset?"
                                                                 1)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (rewrite
                                                                     "vars_args"
                                                                     -1)
                                                                    (("3"
                                                                      (skolem
                                                                       -1
                                                                       "t1")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (expand
                                                                           "lhs"
                                                                           -1)
                                                                          (("3"
                                                                            (rewrite
                                                                             "first_proj_mem")
                                                                            (("3"
                                                                              (skolem
                                                                               -1
                                                                               "up1")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "apply_sub_unif_pair")
                                                                                  (("3"
                                                                                    (skolem
                                                                                     -1
                                                                                     "up")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (replace
                                                                                         -2
                                                                                         -3)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "apply_sub"
                                                                                           -3)
                                                                                          (("3"
                                                                                            (replace
                                                                                             -3
                                                                                             -4)
                                                                                            (("3"
                                                                                              (use
                                                                                               "vars_subs_t")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 -11
                                                                                                 -10
                                                                                                 4
                                                                                                 5)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subset?"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         ("member"
                                                                                                          "union")
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -7
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "img_basic_sub_var")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "subset?")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "ext_vars"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          -14
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -13
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "subset?")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "vars_args")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       2
                                                                                                                       "up`1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "lhs"
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "first_proj_mem")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "up")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (hide-all-but
                                                             (-13 1))
                                                            (("5"
                                                              (reveal
                                                               -2)
                                                              (("5"
                                                                (use
                                                                 "apply_sub_vars")
                                                                (("5"
                                                                  (expand
                                                                   "subset?")
                                                                  (("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (inst?)
                                                                      (("5"
                                                                        (inst?)
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (expand
                                                                             ("member"
                                                                              "union")
                                                                             -1)
                                                                            (("5"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "del"
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "inst_step_img")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subset?")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 5)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "var_inputs_cond?" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (var_inputs_inst_step_ctx 0
  (var_inputs_inst_step_ctx-1 nil 3893192786
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "G1" "inst_step(PV, G, P, null, null)`1")
            ((""
              (name-replace "G1_"
               "inst_step(PV, G, apply_sub(rho, P), null, null)`1")
              (("" (reveal -2)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (expand "G1_" 1)
                          (("1" (expand "apply_sub" 1)
                            (("1" (assert)
                              (("1"
                                (expand "inst_step" 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (name-replace "t" "car(P)`1")
                          (("1" (name-replace "s" "car(P)`2")
                            (("1" (case "subs(rho)(t) = t")
                              (("1"
                                (case "subs(rho)(s) = s")
                                (("1"
                                  (name-replace
                                   "del"
                                   "inst_step(PV, G, t, s)`2")
                                  (("1"
                                    (name-replace
                                     "skp"
                                     "inst_step(PV, G, t, s)`3")
                                    (("1"
                                      (name-replace
                                       "fai"
                                       "inst_step(PV, G, t, s)`4")
                                      (("1"
                                        (name-replace
                                         "G2"
                                         "inst_step(PV, G, t, s)`1")
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (reveal -2 -3 -4 -5)
                                            (("1"
                                              (split -7)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (reveal -6 -7)
                                                  (("1"
                                                    (expand "G1_")
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       2
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "apply_sub"
                                                           2
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -9)
                                                                (("1"
                                                                  (replace
                                                                   -10)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_step"
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (rewrite
                                                       "inst_step1_no_effect_cor")
                                                      (("1"
                                                        (expand
                                                         "G1_"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "apply_sub"
                                                           3)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (reveal
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (expand
                                                                     "apply_sub"
                                                                     3
                                                                     1)
                                                                    (("1"
                                                                      (reveal
                                                                       -6
                                                                       -7)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -10)
                                                                            (("1"
                                                                              (replace
                                                                               -11)
                                                                              (("1"
                                                                                (expand
                                                                                 "inst_step"
                                                                                 3
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "inst_step1_no_effect_cor"
                                                                                   3)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "cdr(P)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1
                                                                                         2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "FV"
                                                                                           "G"
                                                                                           "PV"
                                                                                           "V"
                                                                                           "V1"
                                                                                           "rho"
                                                                                           "sig"
                                                                                           "sig_")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "skp"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "var_inputs_cdr")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "P = cons((t, s), cdr(P))")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (decompose-equality
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (rewrite
                                                         "append_null")
                                                        (("2"
                                                          (rewrite
                                                           "inst_step1_no_effect_cor2")
                                                          (("2"
                                                            (reveal
                                                             -6
                                                             -7)
                                                            (("2"
                                                              (expand
                                                               "G1_"
                                                               4)
                                                              (("2"
                                                                (expand
                                                                 "apply_sub"
                                                                 4)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     3
                                                                     4)
                                                                    (("2"
                                                                      (reveal
                                                                       -3
                                                                       -4)
                                                                      (("2"
                                                                        (expand
                                                                         "apply_sub"
                                                                         4
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -3)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -8)
                                                                              (("2"
                                                                                (replace
                                                                                 -9)
                                                                                (("2"
                                                                                  (expand
                                                                                   "inst_step"
                                                                                   4)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -6)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "apply_sub"
                                                                                         4
                                                                                         3)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "append_null"
                                                                                           4)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "inst_step1_no_effect_cor2"
                                                                                             4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -7
                                                                                               4
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -8
                                                                                                 4
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -9
                                                                                                   4
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (name-replace
                                                                                                     "del_"
                                                                                                     "inst_step(PV, G, subs(rho)(t), subs(rho)(s))`2")
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "P = cons((t, s), cdr(P))")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -12)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "var_inputs_equal_syn_unif_prb")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "apply_sub(del, cdr(P))")
                                                                                                                            (("1"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -7
                                                                                                                                 -8)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "FV"
                                                                                                                                   "G2"
                                                                                                                                   "PV"
                                                                                                                                   "V"
                                                                                                                                   "V1"
                                                                                                                                   "rho"
                                                                                                                                   "sig"
                                                                                                                                   "sig_")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (postpone)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil)
                               ("2"
                                (hide -1 -2)
                                (("2"
                                  (use "subs_no_effect_t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "var_inputs_cond?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide
                                           -1
                                           -2
                                           -3
                                           -4
                                           -7
                                           -8
                                           -9
                                           2
                                           4)
                                          (("2"
                                            (expand
                                             ("disjoint?" "subset?"))
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "intersection")
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         ("member"
                                                          "intersection")
                                                         2)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "lhs"
                                                               3)
                                                              (("2"
                                                                (expand
                                                                 "first_proj"
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "t"
                                                                   -2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (var_inputs_apply_ac_TCC1 0
  (var_inputs_apply_ac_TCC1-1 nil 3891936638 ("" (subtype-tcc) nil nil)
   nil nil
   (var_inputs_apply_ac subtype
    "(variant_inputs.G, list_adt[[term[atom, perm, variable, f_symbol, ac_symbol], term[atom, perm, variable, f_symbol, ac_symbol]]].cons((variant_inputs.t, variant_inputs.s), variant_inputs.P1), variant_inputs.sigma, variant_inputs.V, variant_inputs.PV)"
    "nice_input")))
 (var_inputs_apply_ac_TCC2 0
  (var_inputs_apply_ac_TCC2-1 nil 3891936638 ("" (subtype-tcc) nil nil)
   nil nil
   (var_inputs_apply_ac subtype
    "(variant_inputs.G, list_adt[[term[atom, perm, variable, f_symbol, ac_symbol], term[atom, perm, variable, f_symbol, ac_symbol]]].cons((variant_inputs.t, variant_inputs.s), variant_inputs.P1), variant_inputs.input_`3, variant_inputs.input_`4, variant_inputs.PV)"
    "nice_input")))
 (var_inputs_apply_ac 0
  (var_inputs_apply_ac-1 nil 3891936639
   ("" (skolem 1 ("FV" "inp" "inp1" "inp_"))
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "G" "inp`1")
          (("" (name-replace "P" "inp`2")
            (("" (name-replace "sig" "inp`3")
              (("" (name-replace "V" "inp`4")
                (("" (name-replace "PV" "inp`5")
                  (("" (name-replace "up" "choose_eq(P)`1")
                    (("" (name-replace "t" "up`1")
                      (("" (name-replace "s" "up`2")
                        (("" (name-replace "P1" "choose_eq(P)`2")
                          (("" (name-replace "sig_" "inp_`3")
                            (("" (name-replace "V_" "inp_`4")
                              ((""
                                (expand "apply_ac" -3)
                                ((""
                                  (lift-if)
                                  ((""
                                    (assert)
                                    ((""
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "member" -2)
                                          (("1"
                                            (expand "member" -2)
                                            (("1"
                                              (inst
                                               2
                                               "(G, P1, sig_, V_, PV)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "apply_ac" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11)
                                                  (("2"
                                                    (expand
                                                     "var_inputs?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (name-replace
                                           "lst_V"
                                           "finset2list[variable](V)")
                                          (("2"
                                            (name-replace
                                             "ac_results"
                                             "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                            (("2"
                                              (name-replace
                                               "new_V"
                                               "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                              (("2"
                                                (name-replace
                                                 "ac_results_subs"
                                                 "inst_step(PV, G, ac_results)")
                                                (("2"
                                                  (rewrite
                                                   "input_apply_ac_mem")
                                                  (("2"
                                                    (skolem
                                                     -1
                                                     ("G2"
                                                      "P2"
                                                      "sig2"))
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "ac_results_subs"
                                                         -1)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           -4
                                                           -5
                                                           -6)
                                                          (("2"
                                                            (use
                                                             "inst_step_mem")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skolem
                                                                 -1
                                                                 "Pc")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "ac_results"
                                                                     -1)
                                                                    (("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

