(fresh_subs
 (fresh_subs_TCC1 0
  (fresh_subs_TCC1-1 nil 3882713102 ("" (termination-tcc) nil nil) nil
   nil
   (fresh_subs termination
    "fresh_subs.fresh_subs(fresh_subs.Delta)(fresh_subs.sigma, fresh_subs.tail)"
    "nil")))
 (fresh_subs?_TCC1 0
  (fresh_subs?_TCC1-1 nil 3882713102 ("" (termination-tcc) nil nil) nil
   nil
   (fresh_subs? termination
    "fresh_subs.fresh_subs?(fresh_subs.sigma, fresh_subs.tail)"
    "nil")))
 (fresh_subs_character 0
  (fresh_subs_character-1 nil 3885978626
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (reveal -1)
        (("1" (inst -1 "ax!1") (("1" (assert) nil nil)) nil)) nil)
       ("2" (reveal -1)
        (("2" (inst -1 "ax!1") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fresh def-decl "bool" freshness nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_subs_append_context 0
  (fresh_subs_append_context-1 nil 3885979445
   ("" (induct "Nabla1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_subs_weakening 0
  (fresh_subs_weakening-1 nil 3885980032
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("ax" "Delta"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" (-2 1))
            (("2" (flatten)
              (("2" (inst -1 "Nabla1" "Nabla2" "sigma")
                (("2" (assert)
                  (("2" (prop)
                    (("2"
                      (lemma "fresh_weakening"
                       ("Delta" "Nabla1" "Nabla" "Nabla2" "a" "ax`1"
                        "t" "subs(sigma)((: :) * ax`2)"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fresh_weakening formula-decl nil freshness nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_subs_fresh 0
  (fresh_subs_fresh-1 nil 3885991827
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2 1)
                  (("1" (rewrite "subs_const")
                    (("1" (assert)
                      (("1" (expand "fresh" (-5 1))
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (replace -2)
                    (("2" (expand "fresh" -4)
                      (("2" (rewrite "subs_ext_pi")
                        (("2" (rewrite "ext_reverse_fresh" 1)
                          (("2"
                            (name-replace "b" "act(reverse(p(t)))(a)")
                            (("2" (reveal -1)
                              (("2"
                                (use "fresh_subs_character")
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "(b, V(t))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subs" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "fresh") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -5)
                  (("4" (replace -2 1)
                    (("4" (rewrite "subs_pair" 1)
                      (("4" (expand "fresh" (-5 1))
                        (("4" (flatten)
                          (("4" (prop)
                            (("1" (inst -3 "term1(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst -1 "G" "G1" "a" "sigma")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst -3 "term2(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "G" "G1" "a" "sigma")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -5)
                  (("5" (replace -2 1)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "fresh" (-5 1))
                        (("5" (inst -3 "arg(t)")
                          (("5" (expand "size" -3 2)
                            (("5" (assert)
                              (("5"
                                (inst -3 "G" "G1" "a" "sigma")
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -5)
                  (("6" (replace -2 1)
                    (("6" (rewrite "subs_ac" 1)
                      (("6" (expand "fresh" (-5 1))
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (expand "size" -3 2)
                            (("6" (assert)
                              (("6"
                                (inst -3 "G" "G1" "a" "sigma")
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -5)
                  (("7" (replace -2 1)
                    (("7" (rewrite "subs_abs" 1)
                      (("7" (expand "fresh" (-5 1))
                        (("7" (prop)
                          (("7" (inst -4 "body(t)")
                            (("7" (expand "size" -4 2)
                              (("7"
                                (assert)
                                (("7"
                                  (inst -4 "G" "G1" "a" "sigma")
                                  (("7" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_abs formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subs_unit formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (fresh_subs_character formula-decl nil fresh_subs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (fresh def-decl "bool" freshness nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subs_equal? 0
  (subs_equal?-1 nil 3885993051
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2 1 nil rl)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "term_at_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (rewrite "subs_const")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "term_times_eta")
                    (("2" (inst? -1)
                      (("2" (replace -1 2 rl)
                        (("2" (lemma "term_times_eta")
                          (("2" (inst -1 "s")
                            (("2" (replace -1 2 :dir rl)
                              (("2"
                                (rewrite "subs_ext_pi")
                                (("2"
                                  (rewrite "subs_ext_pi")
                                  (("2"
                                    (replace -5 :dir rl)
                                    (("2"
                                      (use "equal?_fresh_invariance")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 3 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "a")
                                              (("2"
                                                (inst -7 "a")
                                                (("2"
                                                  (use
                                                   "fresh_subs_character")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "(a, V(t))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "subs"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -2 3)
                    (("3" (rewrite "subs_unit")
                      (("3" (case "t = unit")
                        (("1" (replace -1 3)
                          (("1" (rewrite "subs_unit")
                            (("1" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "term_pair_eta")
                    (("4" (inst-cp -1 "t")
                      (("4" (inst -1 "s")
                        (("4" (replace -1 4 rl t)
                          (("4" (replace -1 4 rl t)
                            (("4" (rewrite "subs_pair")
                              (("4"
                                (rewrite "subs_pair")
                                (("4"
                                  (expand "equal?" 4)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (reveal -4)
                                      (("1"
                                        (inst -1 "term1(t)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "G")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -4)
                                      (("2"
                                        (inst -1 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "G")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (lemma "term_app_eta")
                      (("5" (inst -1 "t")
                        (("5" (replace -1 1 rl)
                          (("5" (hide -1)
                            (("5" (rewrite "subs_app")
                              (("5"
                                (lemma "term_app_eta")
                                (("5"
                                  (inst -1 "s")
                                  (("5"
                                    (replace -1 1 rl)
                                    (("5"
                                      (rewrite "subs_app")
                                      (("5"
                                        (expand "equal?" 1)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (reveal -3)
                                            (("5"
                                              (inst -1 "arg(t)")
                                              (("5"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "G1"
                                                   "arg(s)"
                                                   "sigma")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "equal?_num_arg2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (flatten)
                      (("6" (name-replace "g" "ac_sym(t)")
                        (("6" (case "num_arg(g, t) = num_arg(g, s)")
                          (("1" (hide 1 2 3 4 5)
                            (("1" (skeep)
                              (("1"
                                (lemma "term_ac_app_eta")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (hide -6 -7 -8 -9)
                                    (("1"
                                      (replace -5 -1 rl)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "term_ac_app_eta")
                                            (("1"
                                              (inst -1 "t")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (rewrite "subs_ac")
                                                  (("1"
                                                    (rewrite "subs_ac")
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (case
                                                             "equal?(G)(t, s)")
                                                            (("1"
                                                              (lemma
                                                               "perm_args_ac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G1"
                                                                 "ac_app(g, subs(sigma)(ac_arg(s)))"
                                                                 "g"
                                                                 "_")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "are_ac?"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "args_subs_ac")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "subs_ac")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "ac_arg(t)"
                                                                                 "g"
                                                                                 "sigma")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "ac_arg(s)"
                                                                                   "g"
                                                                                   "sigma")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "num_arg(g, t) > 1")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -7
                                                                                             -14)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       nil
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "subs_perm_get_args_ge1")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "G1"
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "perm?(G1)(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                                                                                   get_args(g)(subs(sigma)(delete(g, t)(i)))), get_args(g)(subs(sigma)(s)))")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "perm?_trans")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "G1"
                                                                                                                     "get_args(g)(subs(sigma)(t))"
                                                                                                                     "_"
                                                                                                                     "_")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "subs_perm_get_args_ge1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "G1"
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sigma"
                                                                                                                       "s")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "perm?_sym")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "G1"
                                                                                                                             "get_args(g)(subs(sigma)(s))"
                                                                                                                             "append(get_args(g)(subs(sigma)(select(g, s)(j))),
                                                                       get_args(g)(subs(sigma)(delete(g, s)(j))))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "perm?(G1)(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                                                                                           get_args(g)(subs(sigma)(delete(g, t)(i)))), append(get_args(g)(subs(sigma)(select(g, s)(j))),
                                                                                           get_args(g)(subs(sigma)(delete(g, s)(j)))))")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -11
                                                                                                                                     -10
                                                                                                                                     -9
                                                                                                                                     -8
                                                                                                                                     -7
                                                                                                                                     -6
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "perm?_trans")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G1"
                                                                                                                                         "_"
                                                                                                                                         "_"
                                                                                                                                         "get_args(g)(subs(sigma)(s))")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_append")
                                                                                                                                        (("2"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (reveal
                                                                                                                                                   -23)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "select(g, t)(i)")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -10)
                                                                                                                                                      (("1"
                                                                                                                                                        (prop)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "G"
                                                                                                                                                             "G1"
                                                                                                                                                             "select(g, s)(j)"
                                                                                                                                                             "sigma")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -9)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "ac_perm_args2")
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           "ac_select_size")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "is_ac_sym?"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (reveal
                                                                                                                                                   -23)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "delete(g, t)(i)")
                                                                                                                                                    (("2"
                                                                                                                                                      (prop)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "G1"
                                                                                                                                                         "delete(g, s)(j)"
                                                                                                                                                         "sigma")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -9
                                                                                                                                                             -10)
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               "ac_perm_args2")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "ac_delete_size")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "num_arg(g, t) = 1")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "subs_get_args1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -10)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -17)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "subs_get_args1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sigma"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -11)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -20)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "select(g, t)(i)")
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G"
                                                                                                                                         "G1"
                                                                                                                                         "select(g, s)(j)"
                                                                                                                                         "sigma")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -6)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "ac_perm_args2")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (rewrite
                                                                                                                                         "ac_select_size")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "is_ac_sym?"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -19)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       -9
                                                                                                       -16)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "num_arg_ge1")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "equal?"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "i"
                                                                         "j")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "equal?_num_arg")
                            (("2" (hide 2 3 4 5 6 7)
                              (("2"
                                (inst -1 "G" "g" "s" "t")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "equal?" 1)
                                    (("2"
                                      (expand "g")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (lemma "term_abs_eta")
                    (("7" (inst -1 "t")
                      (("7" (lemma "term_abs_eta")
                        (("7" (inst -1 "s")
                          (("7" (replace -2 7 :dir rl)
                            (("7" (rewrite "subs_abs")
                              (("7"
                                (replace -1 7 :dir rl)
                                (("7"
                                  (rewrite "subs_abs")
                                  (("7"
                                    (expand "equal?" 7)
                                    (("7"
                                      (assert)
                                      (("7"
                                        (reveal -2)
                                        (("7"
                                          (inst -1 "body(t)")
                                          (("7"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (lemma "term_abs_eta")
                    (("8" (inst -1 "t")
                      (("8" (lemma "term_abs_eta")
                        (("8" (inst -1 "s")
                          (("8" (replace -2 8 :dir rl)
                            (("8" (rewrite "subs_abs")
                              (("8"
                                (replace -1 8 :dir rl)
                                (("8"
                                  (rewrite "subs_abs")
                                  (("8"
                                    (expand "equal?" 8)
                                    (("8"
                                      (assert)
                                      (("8"
                                        (prop)
                                        (("1"
                                          (use "fresh_subs_fresh")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (reveal -2)
                                          (("2"
                                            (inst -1 "body(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "G1"
                                                 "_"
                                                 "sigma")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "ext(cons((abstr(t), abstr(s)), null))(body(s))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "subs_ext")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (fresh_subs_fresh formula-decl nil fresh_subs nil)
    (subs_ext formula-decl nil substitution nil)
    (ext def-decl "term" term_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (subs_abs formula-decl nil substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_num_arg formula-decl nil equality nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (are_ac? const-decl "bool" term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (perm? def-decl "bool" equality nil)
    (append def-decl "list[T]" list_props nil)
    (select def-decl "term" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (perm?_trans formula-decl nil equality nil)
    (perm?_append formula-decl nil equality nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (perm?_sym formula-decl nil equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (args_subs_ac formula-decl nil substitution nil)
    (perm_args_ac formula-decl nil equality nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subs_ac formula-decl nil substitution nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (subs_app formula-decl nil substitution nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (equal?_ref formula-decl nil equality nil)
    (subs_unit formula-decl nil substitution nil)
    (term_times_eta formula-decl nil term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (fresh_subs_character formula-decl nil fresh_subs nil)
    (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subs const-decl "term" substitution nil)
    (equal?_fresh_invariance formula-decl nil equality nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_at_eta formula-decl nil term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil))
   nil))
 (subs_perm?_get_args 0
  (subs_perm?_get_args-1 nil 3886000123
   ("" (skeep)
    (("" (rewrite "subs_map")
      (("" (rewrite "subs_map")
        (("" (lemma "perm?_get_args_flatten")
          (("" (inst?)
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "subs_perm?")
                  (("" (inst?)
                    (("" (inst -1 "G") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_context type-eq-decl nil freshness nil)
    (subs def-decl "args" substitution nil)
    (string type-eq-decl nil strings nil)
    (subs_perm? formula-decl nil fresh_subs nil)
    (perm?_get_args_flatten formula-decl nil equality nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subs_map formula-decl nil substitution nil))
   nil))
 (subs_same_count_TCC1 0
  (subs_same_count_TCC1-1 nil 3886000166 ("" (subtype-tcc) nil nil) nil
   nil
   (subs_same_count subtype "equality.equal?(fresh_subs.G)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_same_count_TCC2 0
  (subs_same_count_TCC2-1 nil 3886000166 ("" (subtype-tcc) nil nil) nil
   nil
   (subs_same_count subtype "equality.equal?(fresh_subs.G1)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_same_count 0
  (subs_same_count-1 nil 3886000148
   ("" (skeep)
    (("" (lemma "perm?_equiv_same_count?")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_perm?")
            (("" (inst?)
              (("" (inst -1 "G1" "sigma")
                (("" (assert)
                  (("" (lemma "perm?_equiv_same_count?")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (subs_perm? formula-decl nil fresh_subs nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (subs def-decl "args" substitution nil)
    (perm?_equiv_same_count? formula-decl nil equality nil))
   nil))
 (subs_count_vec 0
  (subs_count_vec-1 nil 3886777152
   ("" (skeep)
    (("" (lemma "count_vec_get_lst_mult2")
      (("" (inst -1 "G" "args1" "args2" "coef" "coef2" "f")
        (("" (assert)
          (("" (replace -2)
            (("" (assert)
              (("" (lemma "count_vec_get_lst_mult2")
                ((""
                  (inst -1 "G1" "subs(sigma)(args1)"
                   "subs(sigma)(args2)" "coef" "coef2" "f")
                  (("" (assert)
                    (("" (flatten)
                      (("" (hide -1)
                        (("" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (hide 2)
                            (("2" (lemma "subs_perm?")
                              (("2"
                                (inst
                                 -1
                                 "G"
                                 "G1"
                                 "flatten(map(get_args(f))(get_lst_mult(args1, coef)))"
                                 "flatten(map(get_args(f))(get_lst_mult(args2, coef2)))"
                                 "sigma")
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "subs_flatten")
                                    (("2"
                                      (rewrite "subs_flatten")
                                      (("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (get_args_not_pair_ac2 formula-decl nil term_properties nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (subs_perm?_get_args formula-decl nil fresh_subs nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (subs_map formula-decl nil substitution nil)
    (subs_get_lst_mult formula-decl nil substitution nil)
    (subs def-decl "args" substitution nil)
    (no_pair_ac? const-decl "bool" term_properties nil)
    (get_lst_mult_mem formula-decl nil list_theory nil)
    (count_vec_get_lst_mult2 formula-decl nil equality nil))
   shostak))
 (equal_sub_res_append 0
  (equal_sub_res_append-1 nil 3886000176
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skolem 1 "x")
        (("" (expand "equal?" -1)
          (("" (inst -1 "x")
            (("" (prop)
              (("" (expand "subs")
                (("" (rewrite "subs_append2")
                  (("" (rewrite "subs_append2")
                    (("" (lemma "subs_equal?")
                      (("" (inst?)
                        (("" (inst -1 "G") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (subs_equal? formula-decl nil fresh_subs nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (subs_append2 formula-decl nil substitution nil))
   nil))
 (subs_count_ge_TCC1 0
  (subs_count_ge_TCC1-1 nil 3886000275 ("" (subtype-tcc) nil nil) nil
   nil
   (subs_count_ge subtype "equality.equal?(fresh_subs.G1)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_count_ge 0
  (subs_count_ge-1 nil 3886000244
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 ("t"))
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "subs_get_args1")
                (("1" (inst -1 "f" "1" "sigma" "t")
                  (("1" (case "num_arg(f, t) = 1")
                    (("1" (assert)
                      (("1" (inst -3 "select(f, t)(1)")
                        (("1"
                          (case "count(select(f, t)(1), get_args(f)(t), equal?(G)) > 0")
                          (("1"
                            (case "count(select(f, t)(1), get_args(f)(s), equal?(G)) > 0")
                            (("1" (hide -2)
                              (("1"
                                (replace -3)
                                (("1"
                                  (case "num_arg(f, s) = 1")
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst -1 "f" "1" "sigma" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "count_gt0[term]")
                                          (("1"
                                            (name-replace
                                             "t1"
                                             "select(f, t)(1)")
                                            (("1"
                                              (inst
                                               -1
                                               "equal?(G)"
                                               "get_args(f)(s)"
                                               "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "get_args_nth")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "i+1"
                                                         "s")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_equal?")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "G1"
                                                                             "select(f, s)(1)"
                                                                             "sigma"
                                                                             "t1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "ac_perm_args2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G1"
                                                                                   "f"
                                                                                   "subs(sigma)(select(f, s)(1))"
                                                                                   "subs(sigma)(t1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "perm?_equiv_same_count?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "same_count?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "t2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "num_arg(f, s) > 1")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (lemma "count_gt0[term]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skolem -1 "i")
                                              (("1"
                                                (name-replace
                                                 "t1"
                                                 "select(f, t)(1)")
                                                (("1"
                                                  (lemma
                                                   "get_args_nth")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "nice_ind?(1 + i, num_arg(f, s))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "subs_perm_get_args_ge1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "G1"
                                                               "f"
                                                               "1+i"
                                                               "sigma"
                                                               "s")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "perm?_equiv_same_count?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "same_count?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "t2")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "count_append")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_equal?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "G"
                                                                                         "G1"
                                                                                         "select(f, s)(1 + i)"
                                                                                         "sigma"
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "ac_perm_args2")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "G1"
                                                                                               "f"
                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                               "subs(sigma)(t1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "perm?_equiv_same_count?")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "same_count?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t2")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "num_arg_ge1")
                                      (("2"
                                        (inst -1 "f" "s")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (expand "get_args" 1)
                            (("2" (expand "from_min2max" 1)
                              (("2"
                                (expand "map" 1)
                                (("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "equal?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (case "num_arg(f, t) > 1")
                        (("1" (hide 1)
                          (("1" (case "num_arg(f, s) > 1")
                            (("1" (inst -3 "select(f, t)(1)")
                              (("1"
                                (case
                                 "count(select(f, t)(1), get_args(f)(t), equal?(G)) > 0")
                                (("1"
                                  (case
                                   "count(select(f, t)(1), get_args(f)(s), equal?(G)) > 0")
                                  (("1"
                                    (lemma "count_gt0[term]")
                                    (("1"
                                      (inst
                                       -1
                                       "equal?(G)"
                                       "get_args(f)(s)"
                                       "select(f, t)(1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "i")
                                          (("1"
                                            (lemma "get_args_nth")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "subs_perm_get_args_ge1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G1"
                                                         "f"
                                                         "1"
                                                         "sigma"
                                                         "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "perm?_equiv_same_count?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "same_count?"
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t2")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_perm_get_args_ge1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G1"
                                                                               "f"
                                                                               "1+i"
                                                                               "sigma"
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "perm?_equiv_same_count?")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "same_count?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "t2")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_append")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "count_append")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "subs_equal?")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "G"
                                                                                                         "G1"
                                                                                                         "select(f, s)(1 + i)"
                                                                                                         "sigma"
                                                                                                         "select(f, t)(1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "ac_perm_args2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "G1"
                                                                                                               "f"
                                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                                               "subs(sigma)(select(f, t)(1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "same_count?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "t2")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "count(t2, get_args(f)(subs(sigma)(delete(f, s)(1 + i))), equal?(G1)) >= count(t2, get_args(f)(subs(sigma)(delete(f, t)(1))), equal?(G1))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -8)
                                                                                                                                        (("2"
                                                                                                                                          (reveal
                                                                                                                                           -25)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "delete(f, t)(1)")
                                                                                                                                            (("2"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "G"
                                                                                                                                                 "G1"
                                                                                                                                                 "f"
                                                                                                                                                 "delete(f, s)(1+i)"
                                                                                                                                                 "sigma")
                                                                                                                                                (("1"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "t2")
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (skolem
                                                                                                                                                       1
                                                                                                                                                       "t1")
                                                                                                                                                      (("2"
                                                                                                                                                        (reveal
                                                                                                                                                         -4
                                                                                                                                                         -23)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "subs_perm_get_args_ge1")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "G"
                                                                                                                                                             "f"
                                                                                                                                                             "1"
                                                                                                                                                             "null"
                                                                                                                                                             "t")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "subs"
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -3
                                                                                                                                                                   "t1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "same_count?"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "t1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "count_append")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "subs_perm_get_args_ge1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "G"
                                                                                                                                                                                         "f"
                                                                                                                                                                                         "1+i"
                                                                                                                                                                                         "null"
                                                                                                                                                                                         "s")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "subs"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "perm?_equiv_same_count?")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "same_count?"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "t1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                               "count_append")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "ac_perm_args2")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "G"
                                                                                                                                                                                                                   "f"
                                                                                                                                                                                                                   "select(f, s)(1+i)"
                                                                                                                                                                                                                   "select(f, t)(1)")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "perm?_equiv_same_count?")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "same_count?"
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                 "t1")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "num_arg_delete_size")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "nice_ind?"
                                                     1)
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "count_mem[term]")
                                  (("2"
                                    (inst
                                     -1
                                     "equal?(G)"
                                     "get_args(f)(t)"
                                     "select(f, t)(1)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "get_args" 1)
                                        (("2"
                                          (expand "from_min2max" 1)
                                          (("2"
                                            (expand "map" 1)
                                            (("2"
                                              (expand "member" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "num_arg(f, s) = 1")
                              (("1"
                                (name-replace "t1" "select(f, t)(1)")
                                (("1"
                                  (inst -4 "t1")
                                  (("1"
                                    (name-replace
                                     "t3"
                                     "select(f, t)(2)")
                                    (("1"
                                      (reveal -1)
                                      (("1"
                                        (inst -1 "t3")
                                        (("1"
                                          (expand "get_args" -6 1)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (expand
                                               "from_min2max"
                                               -6)
                                              (("1"
                                                (expand "map" -6)
                                                (("1"
                                                  (expand "map" -6 1)
                                                  (("1"
                                                    (expand
                                                     "count"
                                                     -6
                                                     1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "count"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "get_args"
                                                               -3
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "from_min2max"
                                                                 -3)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "get_args"
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (expand
                                                                           "from_min2max"
                                                                           -3
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "count"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "map"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "count"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "from_min2max"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "count"
                                                                                                                     -2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "equal?_ref")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "map"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "count"
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "equal?_ref")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "equal?_sym")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "G"
                                                                                                               "select(f, s)(1)"
                                                                                                               "t1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "equal?_trans")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "G"
                                                                                                                     "t3"
                                                                                                                     "select(f, s)(1)"
                                                                                                                     "t1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "map"
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "count"
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "map"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "count"
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "from_min2max"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "map"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "count"
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "map"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "count"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "count"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "get_args"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "from_min2max"
                                                                 -1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "count"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "t1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "equal?_ref")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (equivalence? const-decl "bool" relations nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (args type-eq-decl nil term_properties nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (string type-eq-decl nil strings nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (select def-decl "term" term_properties nil)
    (equal?_ref formula-decl nil equality nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (delete def-decl "term" term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (count_append formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (subs_equal? formula-decl nil fresh_subs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_args_len formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (get_args_nth formula-decl nil term_properties nil)
    (count_gt0 formula-decl nil list_theory nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member def-decl "bool" list_props nil)
    (count_mem formula-decl nil list_theory nil)
    (equal?_sym formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (equal?_equiv formula-decl nil equality nil))
   nil))
 (count_subs_count_elem 0
  (count_subs_count_elem-1 nil 3886000287
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "no_rep_args"
         "count_elem(null, null, get_args(f)(t), equal?(G))`1")
        ((""
          (name-replace "coef"
           "count_elem(null, null, get_args(f)(t), equal?(G))`2")
          (("" (flatten)
            (("" (lemma "count_subs_get_args")
              (("" (inst?)
                (("" (replace -1)
                  (("" (hide -1)
                    (("" (lemma "perm?_get_lst_mult_count_elem_cor")
                      (("" (inst -1 "G" "get_args(f)(t)")
                        (("" (assert)
                          (("" (reveal -4 -5)
                            (("" (replace -1)
                              ((""
                                (replace -2)
                                ((""
                                  (hide -1 -2)
                                  ((""
                                    (lemma "subs_perm?")
                                    ((""
                                      (inst?)
                                      ((""
                                        (inst -1 "G1" "sigma")
                                        ((""
                                          (assert)
                                          ((""
                                            (hide -2)
                                            ((""
                                              (use "count_vec_perm")
                                              ((""
                                                (lemma
                                                 "count_vec_perm")
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (inst
                                                     -1
                                                     "subs(sigma)(get_lst_mult(no_rep_args, coef))")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (replace -1)
                                                        ((""
                                                          (hide -1 -2)
                                                          ((""
                                                            (use
                                                             "subs_get_lst_mult")
                                                            ((""
                                                              (replace
                                                               -1)
                                                              ((""
                                                                (hide
                                                                 -1)
                                                                ((""
                                                                  (use
                                                                   "count_vec_get_lst_mult")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (fresh_context type-eq-decl nil freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (subs_perm? formula-decl nil fresh_subs nil)
    (subs_get_lst_mult formula-decl nil substitution nil)
    (count_vec_get_lst_mult formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (count_vec_perm formula-decl nil equality nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (perm?_get_lst_mult_count_elem_cor formula-decl nil equality nil)
    (count_subs_get_args formula-decl nil substitution nil))
   nil))
 (count_subs_subset_aux 0
  (count_subs_subset_aux-1 nil 3886000314
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1"
              (name-replace "no_rep_args"
               "count_elem(null, null, args1, equal?(G))`1")
              (("1"
                (name-replace "coef"
                 "count_elem(null, null, args1, equal?(G))`2")
                (("1"
                  (name-replace "no_rep_args1"
                   "count_coef(args2, args1, equal?(G))`1")
                  (("1"
                    (name-replace "coef1"
                     "count_coef(args2, args1, equal?(G))`2")
                    (("1" (expand "no_rep_args1" 1)
                      (("1" (expand "count_coef" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "subs" 1 2)
                              (("1"
                                (expand "count_vec" 1 2)
                                (("1"
                                  (expand "dot_product" 1 2)
                                  (("1"
                                    (case "null?(no_rep_args)")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (case "null?(args1)")
                                      (("1"
                                        (expand "no_rep_args" 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subset_lst?" -2)
                                        (("2"
                                          (inst -2 "car(args1)")
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (name-replace "x" "car(args2)")
                              (("2"
                                (expand "subs" 2 2)
                                (("2"
                                  (expand "coef1" 2)
                                  (("2"
                                    (expand "count_coef" 2 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case
                                             "count(x, args1, equal?(G)) > 0")
                                            (("1"
                                              (expand "count_vec" 2 2)
                                              (("1"
                                                (expand
                                                 "dot_product"
                                                 2
                                                 2)
                                                (("1"
                                                  (use
                                                   "count_gt0_2[term]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem -1 "x1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (rewrite
                                                             "count_elem2_cor"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "count_elem_mem_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "equal?(G)"
                                                                 "args1"
                                                                 "x1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "count_elem2_cor"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "dot_product_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i"
                                                                                   "count_vec(subs(sigma)(no_rep_args), f, G1)(s)"
                                                                                   "coef")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "=[nat](nth(count_vec(subs(sigma)(no_rep_args), f, G1)(s), i) * nth(coef, i), count(s, subs(sigma)(x), f, G1) * count(x, args1, equal?(G)))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_vec_map")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "remove_map")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "subs_map"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "x2"
                                                                                                         "nth(no_rep_args, i)")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -14)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "cdr(args2)")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "G"
                                                                                                                   "G1"
                                                                                                                   "remove(args1, x, equal?(G))"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "count_elem2_cor"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "subs_map")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "count_vec_map")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "subs_remove")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "count_elem2(remove(args1, x, equal?(G)), equal?(G))`1 = remove(no_rep_args, i) AND  count_elem2(remove(args1, x, equal?(G)), equal?(G))`2 = remove(coef, i)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "count_coef_remove_no_effect[term]")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 1
                                                                                                                                                 "y")
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "dif_elem?"
                                                                                                                                                     -11)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "member_nth2"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (skolem
                                                                                                                                                         -1
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -11
                                                                                                                                                           "j+1"
                                                                                                                                                           "0")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "j")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "count_elem_remove")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "equal?(G)"
                                                                                                                                       "i"
                                                                                                                                       "args1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "count_elem2_cor"
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "count_elem2_cor"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -6)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "remove_elem_eq[term]")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "equal?(G)"
                                                                                                                                                             "args1"
                                                                                                                                                             "x"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     :dir
                                                                                                                                                                     rl)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-2
                                                                                                                                                                    -5
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "equal?_trans")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "G"
                                                                                                                                                                       "x"
                                                                                                                                                                       "x1"
                                                                                                                                                                       "x2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "no_rep_args"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset_lst?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "y")
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset_lst?"
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -9
                                                                                                                                 "y")
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "remove_elem_cor[term]")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "count0_eq[term]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "equal?_ref")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (use
                                                                                                                                     "remove_elem_mem2[term]")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "dif_elem?"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           ("n1"
                                                                                                                            "n2"))
                                                                                                                          (("3"
                                                                                                                            (prop)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "dif_elem?"
                                                                                                                               -12)
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -12
                                                                                                                                 "n1+1"
                                                                                                                                 "n2+1")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     3)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       3)
                                                                                                                                      (("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "count_vec_nth"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "subs_map"
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "x2"
                                                                                                       "nth(no_rep_args, i)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "count_eq[term]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "equal?(G)"
                                                                                                           "args1"
                                                                                                           "x"
                                                                                                           "x1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "count_eq2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "G1"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "subs(sigma)(x)"
                                                                                                                   "subs(sigma)(x2)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "subs_equal?")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "G"
                                                                                                                             "G1"
                                                                                                                             "x2"
                                                                                                                             "sigma"
                                                                                                                             "x")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "equal?_trans")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G"
                                                                                                                                   "x"
                                                                                                                                   "x1"
                                                                                                                                   "x2")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "subs_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "count_vec_len")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "subs_len")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("3"
                                                                                        (expand
                                                                                         "coef"
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "no_rep_args"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (use
                                                                                             "count_elem_len[term]")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "count(x, args1, equal?(G)) = 0")
                                              (("1"
                                                (expand
                                                 "count_vec"
                                                 3
                                                 2)
                                                (("1"
                                                  (expand
                                                   "dot_product"
                                                   3
                                                   2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args2)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "subset_lst?"
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         1
                                                                         "y")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "subset_lst?"
                                                                             -4)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (use
                                                                                     "count0_eq[term]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "equal?_ref")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     3)
                                                                    (("3"
                                                                      (expand
                                                                       "dif_elem?"
                                                                       1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "dif_elem?"
                                                                           -7)
                                                                          (("3"
                                                                            (inst
                                                                             -7
                                                                             "i+1 "
                                                                             "j+1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (equivalence? const-decl "bool" relations nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_lst? const-decl "bool" list_theory nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (string type-eq-decl nil strings nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (fresh_subs def-decl "bool" fresh_subs nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (count_vec def-decl "list[nat]" equality nil)
    (subs def-decl "args" substitution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (> const-decl "bool" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem2_cor formula-decl nil more_list_theory_props nil)
    (dot_product_nth formula-decl nil more_list_theory_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_map formula-decl nil map_theory nil)
    (subs_remove formula-decl nil substitution nil)
    (count_elem_remove formula-decl nil more_list_theory_props nil)
    (equal?_trans formula-decl nil equality nil)
    (remove_elem_eq formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member_nth2 formula-decl nil list_theory nil)
    (count_coef_remove_no_effect formula-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (count0_eq formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (subs_map formula-decl nil substitution nil)
    (count_vec_map formula-decl nil equality nil)
    (count_vec_nth formula-decl nil equality nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (count_eq formula-decl nil list_theory nil)
    (count_eq2 formula-decl nil equality nil)
    (subs_equal? formula-decl nil fresh_subs nil)
    (subs_len formula-decl nil substitution nil)
    (count_vec_len formula-decl nil equality nil)
    (count_elem_len formula-decl nil list_theory nil)
    (count_elem_mem_nth formula-decl nil more_list_theory_props nil)
    (count_gt0_2 formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (equal?_equiv formula-decl nil equality nil))
   nil))
 (count_subs_subset 0
  (count_subs_subset-1 nil 3886000348
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "count_subs_count_elem")
          (("" (inst?)
            (("" (inst -1 "G")
              (("" (assert)
                (("" (assert)
                  (("" (replace -1)
                    (("" (hide -1)
                      (("" (lemma "count_subs_subset_aux")
                        ((""
                          (inst -1 "G" "G1" "get_args(f)(t)" "args1"
                           "f" "s" "sigma")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_subs_count_elem formula-decl nil fresh_subs nil)
    (args type-eq-decl nil term_properties nil)
    (count_subs_subset_aux formula-decl nil fresh_subs nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (fresh_subs?_var 0
  (fresh_subs?_var-1 nil 3882713120
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (name-replace "a" "hd`1")
            (("2" (name-replace "X" "hd`2")
              (("2" (expand "fresh_subs?" 1)
                (("2" (expand "x" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "subset?" 1)
                        (("1" (skeep)
                          (("1" (rewrite "vars_append_context" -3)
                            (("1" (expand ("member" "union") -3)
                              (("1"
                                (prop)
                                (("1"
                                  (use "vars_fresh?")
                                  (("1"
                                    (expand "subset?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "vars_subs_t")
                                          (("1"
                                            (expand "subset?" -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   ("member" "union")
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -6 "sigma")
                                  (("2"
                                    (expand "subset?" -6)
                                    (("2"
                                      (inst -6 "x")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 2) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 2) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (fresh_subs? def-decl "[fresh_context, bool]" fresh_subs nil)
    (union const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (vars_append_context formula-decl nil freshness nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (vars_fresh? formula-decl nil freshness nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (x const-decl "[fresh_context, bool]" freshness nil))
   shostak))
 (vars_range_sub_TCC1 0
  (vars_range_sub_TCC1-1 nil 3882713102 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_range_sub subtype "fresh_subs.sigma"
    "(list_adt[basic_sub].cons?)")))
 (vars_range_sub_TCC2 0
  (vars_range_sub_TCC2-1 nil 3882713102 ("" (termination-tcc) nil nil)
   nil nil
   (vars_range_sub termination
    "fresh_subs.vars_range_sub(list_adt[basic_sub].cdr(fresh_subs.sigma))"
    "nil")))
 (vars_range_sub_TCC3 0
  (vars_range_sub_TCC3-1 nil 3882713102 ("" (subtype-tcc) nil nil) nil
   nil
   (vars_range_sub subtype "fresh_subs.sigma"
    "(list_adt[basic_sub].cons?)")))
 (vars_dom_sub_TCC1 0
  (vars_dom_sub_TCC1-1 nil 3882713102 ("" (termination-tcc) nil nil)
   nil nil
   (vars_dom_sub termination
    "fresh_subs.vars_dom_sub(list_adt[basic_sub].cdr(fresh_subs.sigma))"
    "nil"))))

