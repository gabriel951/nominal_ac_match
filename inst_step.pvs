% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%
%%%%%%%%%%%%%%%%%%%%%%%

inst_step: THEORY
BEGIN
	IMPORTING unification, fresh_subs, diophantine, list_theory[number], list_theory[args], list_theory[basic_sub]

sigma, delta, sigma2, gamma, gamma1: VAR sub
rho: VAR renaming

X, Y: VAR variable

G, Delta: VAR fresh_context 
pi: VAR perm


sym: VAR string

t, s, t1, t2, tsigma: VAR term
args, args1: VAR args
lst_args, lst_args1, lst_args2: VAR list[args]

unif_pair, unif_pair2: VAR unif_pair
unif_prb, unif_prb1, unif_prb2, seen_unif_prb, unseen_unif_prb: VAR unif_prb
ac_results_so_far, lst_unif_prb, lst_unif_prb1, lst_unif_prb2: VAR list[unif_prb]
set_vars2avoid, V, PV: VAR finite_set[variable]

% check if either one of the terms "s" or "t" are variables and whether can solve {s =? t} by instantiating.
% returns
%   1 - the new context we must work with 
%   1 - the substitution "sigma" computed (if a instantiation happened )
%   2 - a boolean "skip" indicating that the terms can't be unified via a instantiation of s
%   3 - a boolean "impossible" indicating that the terms can't be unified
instantiate_step(PV, G, t, s): [fresh_context, sub, bool, bool] =  
   IF var?(s) THEN
        IF (NOT member(V(s), vars(t))) AND NOT (member(V(s), PV)) THEN LET
	    % instantiate s to t
	    sigma = cons((V(s), ext(reverse(p(s)))(t)), null),
	    (G1, bool1) = fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSIF var?(t) AND NOT member(V(t), PV) THEN LET
	    %instantiate t to s 
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSIF var?(t) AND V(s) = V(t) THEN LET 
	    % since we are in matching, we solve the "fixpoint equation" by enlarging the context
	    G1 = append(fc(DS(p(t), p(s)), V(t)), G), 
	    sigma = null, skip = FALSE, impossible = FALSE IN 
	    (G1, sigma, skip, impossible) 

	% no solution
	ELSE LET sigma = null, skip = FALSE, impossible = TRUE IN 
	    	 (G, sigma, skip, impossible)
	ENDIF
	

   ELSIF var?(t) THEN
        IF (NOT member(V(t), PV)) AND (NOT member(V(t), vars(s))) THEN LET 
	    %instantiate t to s 
	    sigma = cons((V(t), ext(reverse(p(t)))(s)), null),
	    (G1, bool1) = fresh_subs?(sigma, G), 
	    skip = FALSE IN 
	    IF bool1 THEN (append(G1, G), sigma, skip, FALSE)
	    ELSE (G, null, skip, TRUE)
	    ENDIF 

	ELSE LET sigma = null, skip = FALSE, impossible = TRUE IN 
	    	 (G, sigma, skip, impossible)
	ENDIF
       
   % none of them are variables, we skip  
   ELSE LET sigma = null, skip = TRUE, impossible = FALSE IN 
        (G, sigma, skip, impossible) 

   ENDIF

% this function is refered in our paper as "instStep"
% receives:
%       1 - the context Gamma (G) that we are working with
%	2 - list of unification problem we still have not tried to instantiate
%       3 - list of unification problem we already have tried to instantiate
% 	4 - the substitution "sigma" computed so far
%       5 - list of protected variables we cannot instantiate
% returns:
%       1 - 
%	2 - the unification problem after we make all the instantiations
% 	3 - the substitution computed
% 	4 - a boolean that is TRUE if one of the unification pairs
% 	    gave an impossible substitution
instantiate_step(PV, G, unseen_unif_prb, seen_unif_prb, sigma): RECURSIVE [fresh_context, unif_prb, sub, bool] =
   IF null?(unseen_unif_prb) THEN (G, seen_unif_prb, sigma, FALSE) 
   ELSE LET 
   	(t, s) = car(unseen_unif_prb), 
   	(G1, delta, skip, fail) = instantiate_step(PV, G, t, s) IN
	IF fail THEN (G, null, sigma, TRUE)
	ELSIF skip THEN  
	     instantiate_step(PV, G, cdr(unseen_unif_prb), cons((t, s), seen_unif_prb), sigma)
	ELSE LET
	     new_unseen_unif_prb = apply_sub(delta, cdr(unseen_unif_prb)), 
	     new_seen_unif_prb = apply_sub(delta, seen_unif_prb), 
	     new_sigma = append(delta, sigma) IN
	     instantiate_step(PV, G1, new_unseen_unif_prb, new_seen_unif_prb, new_sigma)
	ENDIF
   ENDIF
MEASURE length(unseen_unif_prb)

% extends "instantiate_step" to a list of unification problems
% if a unification problem fails when we try to instantiate it, it is removed from the list
instantiate_step(PV, G, lst_unif_prb): RECURSIVE list[[fresh_context, unif_prb, sub]] =
    IF null?(lst_unif_prb) THEN null
    ELSE LET
    	 unif_prb = car(lst_unif_prb),
    	 (G1, new_unif_prb, sigma, fail) = instantiate_step(PV, G, unif_prb, null, null) IN 
	 IF fail THEN instantiate_step(PV, G, cdr(lst_unif_prb))
	 ELSE cons((G1, new_unif_prb, sigma), instantiate_step(PV, G, cdr(lst_unif_prb)))
	 ENDIF
    ENDIF
MEASURE lst_unif_prb BY << 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LEMMAS
% instantiate step
instantiate_step_skip: CONJECTURE
    LET skip = instantiate_step(PV, G, t, s)`3 IN
    skip IMPLIES (NOT var?(t) AND NOT var?(s))

instantiate_step_delta_null: CONJECTURE
    LET (G1, delta, skip, fail) = instantiate_step(PV, G, t, s) IN
    NOT skip AND NOT fail AND delta = null IMPLIES var?(t) AND t = s

instantiate_step_unif: CONJECTURE
    LET (G1, delta, skip, fail) = instantiate_step(PV, G, t, s) IN
    NOT skip and NOT fail IMPLIES subs(delta)(t) = subs(delta)(s)
    
instantiate_step_append: CONJECTURE
    instantiate_step(PV, G, append(lst_unif_prb1, lst_unif_prb2)) =
    append(instantiate_step(PV, G, lst_unif_prb1), instantiate_step(PV, G, lst_unif_prb2))

% TO DO: I am not sure how I will adapt this
%instantiate_step_opt: CONJECTURE
%    member((X, t1), instantiate_step(PV, G, t, s)`1) IMPLIES
%    (variable(X) = t AND t1 = s OR variable(X) = s AND t1 = t)
    
% TO DO: not sure how I will adapt this
%instantiate_step_dom: CONJECTURE
%    member(X, dom(instantiate_step(t, s)`1)) IMPLIES (variable(X) = t OR variable(X) = s)

instantiate_step_supset_dom_dom2: CONJECTURE
    member(X, supset_dom(instantiate_step(PV, G, t, s)`2)) IMPLIES member(X, dom(instantiate_step(PV, G, t, s)`2))

% TO DO
%instantiate_step_img: CONJECTURE
%    img(instantiate_step(PV, G, t, s)`1) = emptyset OR
%    img(instantiate_step(PV, G, t, s)`1) = singleton(t) OR
%    (img(instantiate_step(PV, G, t, s)`1) = singleton(s) AND NOT var?(s))
    
instantiate_step_dom_img: CONJECTURE
    LET sigma = instantiate_step(PV, G, t, s)`2, skip = instantiate_step(PV, G, t, s)`3,
    	fail = instantiate_step(PV, G, t, s)`4 IN
    NOT fail AND NOT skip AND NOT null?(sigma) IMPLIES
    (var?(s) AND dom(sigma) = singleton(V(s)) AND img(sigma) = singleton(t)) OR
    (NOT var?(s) AND var?(t) AND dom(sigma) = singleton(V(t)) AND img(sigma) = singleton(s))

instantiate_step_img_cont: CONJECTURE  
    contained?(instantiate_step(PV, G, t, s)`2, vars(t, s))

instantiate_step_fail: CONJECTURE
    LET sigma = instantiate_step(PV, G, t, s)`2, fail = instantiate_step(PV, G, t, s)`4 IN
    NOT fail IMPLIES idempotent?(sigma) 

instantiate_step_fail_ren: CONJECTURE 
   (FORALL X: 
      member(X, vars(img(rho))) AND NOT member(X, dom(rho)) IMPLIES NOT member(X, vars(t, s)))
   IMPLIES
   instantiate_step(PV, G, t, s)`4 = instantiate_step(PV, G, subs(rho)(t), subs(rho)(s))`4 AND
   instantiate_step(PV, G, t, s)`3 = instantiate_step(PV, G, subs(rho)(t), subs(rho)(s))`3 

instantiate_step_sub_ren: CONJECTURE   
   LET t_ = subs(rho)(t), s_ = subs(rho)(s), 
       sigma = instantiate_step(PV, G, t, s)`2,
       sigma_ = instantiate_step(PV, G, t_, s_)`2 IN 
   (FORALL X: 
      member(X, vars(img(rho))) AND NOT member(X, dom(rho)) IMPLIES NOT member(X, V))
   AND subset?(vars(t, s), V) IMPLIES 
   equal_syn?(append(sigma_, rho), append(rho, sigma), V)
 
instantiate_step_idempotent2: CONJECTURE
    idempotent?(instantiate_step(PV, G, t, s)`2)

instantiate_step_fail_null: CONJECTURE
    LET fail = instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`4
    IN fail AND NOT null?(unif_prb) IMPLIES instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`2 = null

instantiate_step_fail2: CONJECTURE
    LET fail = instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`4
    IN fail IMPLIES instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`2 = null

instantiate_step_idempotent: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`3 IN
    idempotent?(sigma) AND disjoint?(vars(unif_prb), dom(sigma)) IMPLIES 
    idempotent?(delta)

instantiate_step_idempotent3: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    idempotent?(delta)     

instantiate_step_sub: CONJECTURE
    member((G1, unif_prb1, sigma), instantiate_step(PV, G, lst_unif_prb)) IMPLIES
    idempotent?(sigma)  

instantiate_step_sub_append: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`3,
        delta1 = instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`3 IN 
	delta = append(delta1, sigma)

instantiate_step_sub_append_cor: CONJECTURE 
    instantiate_step(PV, G, unif_prb, null, sigma)`3 =
    append(instantiate_step(PV, G, unif_prb, null, null)`3, sigma)

instantiate_step3_no_effect: CONJECTURE
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`3 =
    instantiate_step(PV, G, unif_prb, unif_prb2, sigma)`3

instantiate_step3_no_effect_cor: CONJECTURE
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`3 =
    instantiate_step(PV, G, unif_prb, null, sigma)`3

instantiate_step4_no_effect: CONJECTURE
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`4 =
    instantiate_step(PV, G, unif_prb, unif_prb2, sigma)`4

instantiate_step4_no_effect_cor: CONJECTURE 
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`4 =
    instantiate_step(PV, G, unif_prb, null, sigma)`4
    
instantiate_step4_no_effect2: CONJECTURE
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`4 =
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma2)`4
    
instantiate_step4_no_effect2_cor: CONJECTURE 
    instantiate_step(PV, G, unif_prb, unif_prb1, sigma)`4 =
    instantiate_step(PV, G, unif_prb, unif_prb1, null)`4
    
instantiate_step2_sub: CONJECTURE
    instantiate_step(PV, G, unif_prb, seen_unif_prb, append(sigma, sigma2))`2 =
    instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma2)`2 

instantiate_step2_sub2: CONJECTURE
    instantiate_step(PV, G, unif_prb, seen_unif_prb, sigma)`2 =
    instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`2 

instantiate_step2_append: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`3,
        fail = instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`4 IN 
    NOT fail IMPLIES
    instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`2 = 
    append(instantiate_step(PV, G, unif_prb, null, null)`2, apply_sub(delta, seen_unif_prb))

instantiate_step2_mem: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(t, instantiate_step(PV, G, unif_prb, null, null)`2) IMPLIES 
    EXISTS s:
       NOT var?(s) AND member(s, unif_prb) AND t = subs(delta)(s)

instantiate_step1_mem_unif_pair: CONJECTURE 
    LET delta = instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`3 IN 
    member(unif_pair2, instantiate_step(PV, G, unif_prb, seen_unif_prb, null)`2) IMPLIES 
    EXISTS unif_pair:
       member(unif_pair, append(PV, G, unif_prb, seen_unif_prb)) AND unif_pair2 = apply_sub(delta, unif_pair)

instantiate_step1_subset: CONJECTURE  
    LET (G1, unif_prb2, delta, fail) = instantiate_step(PV, G, unif_prb, null, null) IN 
    EXISTS unif_prb1:
       unif_prb2 = apply_sub(delta, unif_prb1) AND subset?(unif_prb1, unif_prb)

instantiate_step2_mem: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(t, img(delta)) AND NOT var?(t) IMPLIES 
    EXISTS s:
       NOT var?(s) AND member(s, unif_prb) AND t = subs(delta)(s)

instantiate_step2_mem_var: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(pi * X, img(delta)) IMPLIES member(pi * X, unif_prb)
    
% please prefer "instantiate_step_mem2"
% instantiate_step_mem: CONJECTURE
%     member((unif_prb, sigma), instantiate_step(PV, G, lst_unif_prb)) IMPLIES
%    EXISTS unif_prb1:
%	 member(unif_prb1, lst_unif_prb) AND 
%         unif_prb = instantiate_step(PV, G, unif_prb1, null, null)`1 AND
%	 sigma = instantiate_step(PV, G, unif_prb1, null, null)`2

instantiate_step_mem: CONJECTURE
    member((G1, unif_prb, sigma), instantiate_step(PV, G, lst_unif_prb)) IMPLIES
    EXISTS unif_prb1:
	 member(unif_prb1, lst_unif_prb) AND 
         unif_prb = instantiate_step(PV, G, unif_prb1, null, null)`2 AND
	 sigma = instantiate_step(PV, G, unif_prb1, null, null)`3 AND
	 NOT instantiate_step(PV, G, unif_prb1, null, null)`4
	 
instantiate_step_mem3: CONJECTURE  
    (EXISTS unif_prb1: 
	 member(unif_prb1, lst_unif_prb) AND 
	 G1 instantiate_step(PV, G, unif_prb1, null, null)`1
         unif_prb = instantiate_step(PV, G, unif_prb1, null, null)`2 AND
	 sigma = instantiate_step(PV, G, unif_prb1, null, null)`3 AND
	 NOT instantiate_step(PV, G, unif_prb1, null, null)`4)
    IMPLIES member((G1, unif_prb, sigma), instantiate_step(PV, G, lst_unif_prb))

instantiate_step_no_var_pair: CONJECTURE
    unif_prb1 = instantiate_step(PV, G, unif_prb2, null, null)`2 AND no_pair?(unif_prb2)
    IMPLIES no_var_pair?(unif_prb1) 

instantiate_step_no_pair_img: CONJECTURE
     no_pair?(unif_prb) IMPLIES no_pair?(img(instantiate_step(unif_prb, null, null)`3))

% TO DO: I don't think this will need to be adapted 
%instantiate_step_sub_im_under: CONJECTURE
%    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
%    member(t, subterms(img(delta))) AND im_under?(X, t) AND no_pair?(unif_prb) IMPLIES
%    EXISTS Y, s:
%        member(s, subterms(unif_prb)) AND subs(delta)(Y) = variable(X)
%	AND im_under?(Y, s) AND same_func?(t, s)

instantiate_step_var_member: CONJECTURE
     LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN 
     X /= Y AND subs(delta)(X) = variable(Y) IMPLIES
     member(pi * X, unif_prb) AND member(pi * Y, unif_prb)

instantiate_step_rhs_not_id: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3,
        fail = instantiate_step(PV, G, unif_prb, null, null)`4 IN 
    NOT fail AND member(variable(X), rhs(unif_prb)) AND NOT member(variable(X), lhs(unif_prb))
    IMPLIES subs(delta)(X) /= variable(X)

instantiate_step_sub_nice_aux: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member((X, t), delta) IMPLIES member(pi * X, unif_prb) AND
    subset?(vars(t), vars(unif_prb))
    
instantiate_step_supset_dom_dom: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(X, supset_dom(delta)) IMPLIES member(X, dom(delta))

instantiate_step_sub_nice: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    nice?(delta) 
    
instantiate_step_dom2: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(X, dom(delta)) IMPLIES member(pi * X, unif_prb)

instantiate_step_sec_proj: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    member(pi * X, sec_proj(delta)) IMPLIES member(pi * X, unif_prb)

instantiate_step_vars_img: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    subset?(vars(img(delta)), vars(unif_prb))

instantiate_step_cont: CONJECTURE 
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN
    contained?(delta, vars(unif_prb))
    
%instantiate_step_not_temp_unif_pair: CONJECTURE
%    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN 
%    member(t, instantiate_step(unif_prb, null, null)`2)
%    IMPLIES EXISTS s, unif_pair:
%       NOT var?(s) AND t = subs(delta)(s) AND member(s, unif_pair) AND member(unif_pair, unif_prb) 
%       AND NOT temp?(unif_pair, unif_prb)
    
instantiate_step_get_args: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN 
    member(t, img(delta)) AND member(s, get_args(f)(t)) IMPLIES
    EXISTS t1: 
       member(t1, unif_prb) AND
       EXISTS t2: 
          member(t2, get_args(f)(t1)) AND s = subs(delta)(t2) AND ord(t2) = ord(s) 
    
instantiate_step_unifies: CONJECTURE
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3,
        fail = instantiate_step(PV, G, unif_prb, null, null)`4 IN
    (EXISTS gamma: sigma = append(gamma, append(delta, gamma1)))
    AND unifies?(G, sigma, instantiate_step(unif_prb, null, null)`2) AND NOT fail
    AND disjoint?(dom(gamma1), vars(unif_prb)) IMPLIES  
    unifies?(G, sigma, unif_prb)

instantiate_step_unifies_sub: CONJECTURE 
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`2,
        fail = instantiate_step(unif_prb, null, null)`3 IN
        unifies?(sigma, unif_prb) AND NOT fail
    IMPLIES equal?(sigma, append(sigma, delta))

instantiate_step_unifies_not_fail: CONJECTURE 
    LET fail = instantiate_step(PV, G, unif_prb, null, null)`4 IN
        unifies?(G, sigma, unif_prb) AND well_formed?(unif_prb) IMPLIES NOT fail
    
instantiate_step_lst_mem: CONJECTURE 
    LET (G1, unif_prb1, delta, fail) = instantiate_step(PV, G, unif_prb, null, null) IN 
    unifies?(G, sigma, unif_prb) AND well_formed?(unif_prb) AND member(unif_prb, lst_unif_prb)
    IMPLIES member((G1, unif_prb1, delta), instantiate_step(lst_unif_prb))

instantiate_step_well_formed: CONJECTURE 
    LET delta = instantiate_step(PV, G, unif_prb, null, null)`3 IN  
    well_formed?(unif_prb) IMPLIES well_formed?(delta)

instantiate_step_ren3: CONJECTURE  
   LET sigma = instantiate_step(PV, G, unif_prb, null, null)`3,
       sigma_ = instantiate_step(PV, G, apply_sub(rho, unif_prb), null, null)`3 IN 
   (FORALL X: 
      member(X, vars(img(rho))) AND NOT member(X, dom(rho)) IMPLIES NOT member(X, V))
   AND subset?(vars(unif_prb), V) IMPLIES 
   equal_syn?(append(sigma_, rho), append(rho, sigma), V)
     
instantiate_step_ren4: CONJECTURE
   (FORALL X: 
      member(X, vars(img(rho))) AND NOT member(X, dom(rho)) IMPLIES NOT member(X, V)) 
   AND subset?(vars(unif_prb), V) IMPLIES 
   instantiate_step(PV, G, unif_prb, null, null)`4 =
   instantiate_step(PV, G, apply_sub(rho, unif_prb), null, null)`4    

instantiate_step_ren2: CONJECTURE 
   (FORALL X: 
      member(X, vars(img(rho))) AND NOT member(X, dom(rho)) IMPLIES NOT member(X, vars(unif_prb)))
    IMPLIES
    instantiate_step(PV, G, apply_sub(rho, unif_prb), null, null)`2 =
    apply_sub(rho, instantiate_step(PV, G, unif_prb, null, null)`2)

END inst_step
