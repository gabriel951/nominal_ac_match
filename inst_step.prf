(inst_step
 (inst_step_TCC1 0
  (inst_step_TCC1-1 nil 3882510987 ("" (subtype-tcc) nil nil)
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC2 0
  (inst_step_TCC2-1 nil 3882510987 ("" (termination-tcc) nil nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "term" term_properties nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil))
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unif_pair].cdr(inst_step.Pu), list_adt[[term[atom, perm, variable, f_symbol, ac_symbol], term[atom, perm, variable, f_symbol, ac_symbol]]].cons((inst_step.t, inst_step.s), inst_step.Ps), inst_step.sigma)"
    "nil")))
 (inst_step_TCC3 0
  (inst_step_TCC3-1 nil 3882510987 ("" (subtype-tcc) nil nil)
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC4 0
  (inst_step_TCC4-1 nil 3882510987
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -7)
            (("" (rewrite "apply_sub_len") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_len formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G1, inst_step.new_Pu, inst_step.new_Ps, inst_step.new_sigma)"
    "nil")))
 (inst_step_TCC5 0
  (inst_step_TCC5-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC6 0
  (inst_step_TCC6-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_TCC7 0
  (inst_step_TCC7-1 nil 3882510987 ("" (termination-tcc) nil nil) nil
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unification.unif_prb].cdr(inst_step.lst_P))"
    "nil")))
 (inst_step_TCC8 0
  (inst_step_TCC8-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_TCC9 0
  (inst_step_TCC9-1 nil 3882510987 ("" (termination-tcc) nil nil) nil
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unification.unif_prb].cdr(inst_step.lst_P))"
    "nil")))
 (inst_step_TCC10 0
  (inst_step_TCC10-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_img 0
  (inst_step_img-1 nil 3882548828
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "inst_step" -1)
          (("" (lift-if)
            (("" (split -1)
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (use "img_basic_sub_var")
                          (("1" (expand "subset?" -1)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "ext_vars")
                                  (("1"
                                    (hide-all-but (-1 3))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "img_null")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "img_null")
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide-all-but -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "img_null")
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (member const-decl "bool" sets nil)
    (ext_vars formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (img_basic_sub_var formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_idempotent2 0
  (inst_step_idempotent2-1 nil 3882541896
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (split)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (rewrite "idempotent_cons") nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (rewrite "idempotent_cons") nil nil)
                     ("2" (rewrite "idempotent_cons") nil nil)
                     ("3" (rewrite "idempotent_null") nil nil)
                     ("4" (rewrite "idempotent_null") nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_null") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_cons") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten) (("2" (rewrite "idempotent_null") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_cons formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (idempotent_null formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (inst_step3_no_effect 0
  (inst_step3_no_effect-1 nil 3882538498
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "inst_step" 1 1)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (prop)
                                  (("1"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("1"
                                      (expand "inst_step" 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("2"
                                      (expand "inst_step" 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -7)
                                          (("2"
                                            (inst -1 "cdr(P)")
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("3"
                                      (expand "inst_step" 2 2)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (reveal -7)
                                                (("3"
                                                  (inst
                                                   -1
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step3_no_effect_cor 0
  (inst_step3_no_effect_cor-1 nil 3882538880
   ("" (skeep) (("" (use "inst_step3_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step3_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step_sub_append 0
  (inst_step_sub_append-1 nil 3882539294
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" 1)
                    (("1" (assert)
                      (("1" (expand "append" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "append" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (expand "length" -7 2)
                                              (("2"
                                                (assert)
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -4)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (rewrite "append_null")
                                              (("3"
                                                (replace -2)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst
                                                           -5
                                                           "G1"
                                                           "PV"
                                                           "apply_sub(del, Ps)"
                                                           "del")
                                                          (("3"
                                                            (replace
                                                             -5)
                                                            (("3"
                                                              (hide -5)
                                                              (("3"
                                                                (reveal
                                                                 -3)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "apply_sub(del, cdr(P))")
                                                                  (("3"
                                                                    (rewrite
                                                                     "apply_sub_len")
                                                                    (("3"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       2)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "G1"
                                                                           "PV"
                                                                           "apply_sub(del, Ps)"
                                                                           "append(del, sigma)")
                                                                          (("3"
                                                                            (replace
                                                                             -1)
                                                                            (("3"
                                                                              (rewrite
                                                                               "append_assoc")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append_assoc formula-decl nil list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_sub_append_cor 0
  (inst_step_sub_append_cor-1 nil 3882540285
   ("" (skeep)
    (("" (use "inst_step_sub_append") (("" (assert) nil nil)) nil))
    nil)
   ((inst_step_sub_append formula-decl nil inst_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_vars_img 0
  (inst_step_vars_img-1 nil 3882545005
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skeep)
              (("" (expand "inst_step" -2)
                (("" (lift-if)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (rewrite "img_null")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "img_null")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "subset?" -3)
                                                (("2"
                                                  (inst -3 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "del2"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal
                                               -1
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7)
                                              (("3"
                                                (use "vars_img_append")
                                                (("3"
                                                  (expand "subset?" -1)
                                                  (("3"
                                                    (inst -1 "x")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("3"
                                                          (case
                                                           "subset?(vars(img(del)), vars(P))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (inst
                                                                 -11
                                                                 "apply_sub(del, cdr(P))")
                                                                (("1"
                                                                  (rewrite
                                                                   "apply_sub_len")
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -11
                                                                     2)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -11)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "apply_sub_vars")
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       -1)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vars"
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "union")
                                                                                             4)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subset?"
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -10
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -7
                                                                      -8
                                                                      1
                                                                      4))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (img_null formula-decl nil substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (vars_img_append formula-decl nil substitution nil)
    (inst_step_img formula-decl nil inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (apply_sub_vars formula-decl nil unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil))
   shostak))
 (inst_step_idempotent3 0
  (inst_step_idempotent3-1 nil 3882537992
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split)
              (("1" (flatten)
                (("1" (rewrite "idempotent_null") nil nil)) nil)
               ("2" (flatten)
                (("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (rewrite "append_null")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "idempotent_null")
                                  nil
                                  nil)
                                 ("2"
                                  (rewrite "inst_step3_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (rewrite
                                     "inst_step_sub_append_cor")
                                    (("3"
                                      (inst
                                       -1
                                       "apply_sub(del, cdr(P))")
                                      (("3"
                                        (rewrite "apply_sub_len")
                                        (("3"
                                          (expand "length" -1 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (name-replace
                                                 "del2"
                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                (("3"
                                                  (reveal -4 -5 -6 -7)
                                                  (("3"
                                                    (lemma
                                                     "idempotent_append")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "del"
                                                       "del2")
                                                      (("3"
                                                        (reveal -2)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "inst_step_idempotent2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "inst_step_vars_img")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4
                                                                     5
                                                                     6)
                                                                    (("2"
                                                                      (lemma
                                                                       "apply_sub_elim_var2")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand
                                                                           "del"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_idempotent2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -3
                                                                                  1))
                                                                                (("2"
                                                                                  (expand
                                                                                   "disjoint?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (apply_sub_len formula-decl nil unification nil)
    (idempotent_append formula-decl nil substitution nil)
    (inst_step_idempotent2 formula-decl nil inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (del skolem-const-decl "sub" inst_step nil)
    (apply_sub_elim_var2 formula-decl nil unification nil)
    (inst_step_vars_img formula-decl nil inst_step nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append_null formula-decl nil list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (idempotent_null formula-decl nil substitution nil))
   shostak))
 (inst_step_mem 0
  (inst_step_mem-1 nil 3882537521
   ("" (measure-induct "length(lst_P)" "lst_P")
    (("" (skolem 1 "lst_P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" -2)
            (("" (lift-if)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (expand "member" -2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (inst -3 "cdr(lst_P)")
                        (("1" (expand "length" -3 2)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 3 "P1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (inst 3 "car(lst_P)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(lst_P)")
                            (("2" (expand "length" -2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 4 "P1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 4)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     inst_step nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

