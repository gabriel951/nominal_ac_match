(inst_step
 (inst_step_TCC1 0
  (inst_step_TCC1-1 nil 3882510987 ("" (subtype-tcc) nil nil)
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC2 0
  (inst_step_TCC2-1 nil 3882510987 ("" (termination-tcc) nil nil)
   ((inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "term" term_properties nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil))
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unif_pair].cdr(inst_step.Pu), list_adt[[term[atom, perm, variable, f_symbol, ac_symbol], term[atom, perm, variable, f_symbol, ac_symbol]]].cons((inst_step.t, inst_step.s), inst_step.Ps), inst_step.sigma)"
    "nil")))
 (inst_step_TCC3 0
  (inst_step_TCC3-1 nil 3882510987 ("" (subtype-tcc) nil nil)
   ((PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC4 0
  (inst_step_TCC4-1 nil 3882510987
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -7)
            (("" (rewrite "apply_sub_len") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_len formula-decl nil unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G1, inst_step.new_Pu, inst_step.new_Ps, inst_step.new_sigma)"
    "nil")))
 (inst_step_TCC5 0
  (inst_step_TCC5-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.Pu" "(list_adt[unif_pair].cons?)")))
 (inst_step_TCC6 0
  (inst_step_TCC6-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_TCC7 0
  (inst_step_TCC7-1 nil 3882510987 ("" (termination-tcc) nil nil) nil
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unification.unif_prb].cdr(inst_step.lst_P))"
    "nil")))
 (inst_step_TCC8 0
  (inst_step_TCC8-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_TCC9 0
  (inst_step_TCC9-1 nil 3882510987 ("" (termination-tcc) nil nil) nil
   nil
   (inst_step termination
    "inst_step.inst_step(inst_step.PV, inst_step.G, list_adt[unification.unif_prb].cdr(inst_step.lst_P))"
    "nil")))
 (inst_step_TCC10 0
  (inst_step_TCC10-1 nil 3882510987 ("" (subtype-tcc) nil nil) nil nil
   (inst_step subtype "inst_step.lst_P"
    "(list_adt[unification.unif_prb].cons?)")))
 (inst_step_skip 0
  (inst_step_skip-1 nil 3882609024 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (inst_step_supset_dom 0
  (inst_step_supset_dom-1 nil 3882633034
   ("" (skeep)
    (("" (assert)
      (("" (expand "subset?" 1)
        (("" (skeep)
          (("" (expand "inst_step" -1)
            (("" (lift-if)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_dom 0
  (inst_step_dom-1 nil 3883463317
   ("" (skeep)
    (("" (assert)
      (("" (use "inst_step_supset_dom")
        (("" (assert)
          (("" (lemma "supset_dom_correct")
            (("" (expand "subset?")
              (("" (skeep)
                (("" (inst -2 "x")
                  (("" (assert)
                    (("" (inst -1 "x" "inst_step(PV, G, t, s)`2")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (subs const-decl "term" substitution nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (supset_dom_correct formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (inst_step_supset_dom formula-decl nil inst_step nil))
   shostak))
 (inst_step_dom_PV_aux 0
  (inst_step_dom_PV_aux-1 nil 3883225243
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
        (("" (reveal -1)
          (("" (expand "inst_step" -1)
            (("" (lift-if)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -3)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "disjoint?")
                                  (("1"
                                    (expand "empty?")
                                    (("1"
                                      (replace -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 3)
                                  (("2"
                                    (hide-all-but 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 :dir rl)
                            (("2" (hide-all-but 4)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide 3)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (hide-all-but 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 5 :dir rl)
                                (("2"
                                  (hide-all-but 5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 3 :dir rl)
                            (("2" (hide-all-but 3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (replace -1 4)
                                      (("2"
                                        (hide-all-but 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 5 :dir rl)
                                (("2"
                                  (hide-all-but 5)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 3 :dir rl)
                            (("2" (hide-all-but 3)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (replace -1 3 :dir rl)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (intersection const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_img 0
  (inst_step_img-1 nil 3882548828
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "inst_step" -1)
          (("" (lift-if)
            (("" (split -1)
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (use "img_basic_sub_var")
                          (("1" (expand "subset?" -1)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "ext_vars")
                                  (("1"
                                    (hide-all-but (-1 3))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "img_null")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "img_null")
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide-all-but -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "img_null")
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "img_basic_sub_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (hide-all-but (-1 4))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (member const-decl "bool" sets nil)
    (ext_vars formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (img_basic_sub_var formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_dom_img 0
  (inst_step_dom_img-1 nil 3883463894
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
        (("" (reveal -1)
          (("" (flatten)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (hide -1 5)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (use "img_dom_singleton")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "vars_singleton")
                                                (("1"
                                                  (replace
                                                   -3
                                                   3
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand "subs" 3)
                                                    (("1"
                                                      (expand "subs" 3)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         3
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            (("1"
                                                              (rewrite
                                                               "ext_vars")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "img_dom_emptyset")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 4))
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1 3 5)
                                  (("1"
                                    (use "dom_basic_sub2")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "img_dom_singleton")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 3)
                                                  (("1"
                                                    (rewrite
                                                     "vars_singleton"
                                                     3)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           3)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               3)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars")
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_vars")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "img_dom_emptyset")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-1 5))
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "dom_null")
                                      (("2"
                                        (rewrite "img_null")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 3))
                              (("2"
                                (replace -1 1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1 5 1 2 3)
                                  (("1"
                                    (use "dom_basic_sub2")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "img_dom_singleton")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite
                                                     "vars_singleton"
                                                     2)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "subs"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "subs"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "subs"
                                                             2
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "subs"
                                                               2)
                                                              (("1"
                                                                (rewrite
                                                                 "ext_vars")
                                                                (("1"
                                                                  (rewrite
                                                                   "ext_vars")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (use "img_dom_emptyset")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but (-1 5))
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (rewrite "dom_null")
                                      (("2"
                                        (rewrite "img_null")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide-all-but (-1 3))
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (rewrite "dom_null")
                                  (("2" (rewrite "img_null") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but (-1 3))
                          (("2" (replace -1 :dir rl)
                            (("2" (rewrite "dom_null")
                              (("2" (rewrite "img_null") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_dom_emptyset formula-decl nil substitution nil)
    (img_dom_singleton formula-decl nil substitution nil)
    (ext_vars formula-decl nil term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_singleton formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (dom_null formula-decl nil substitution nil)
    (img_null formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_chooses_rhs 0
  (inst_step_chooses_rhs-1 nil 3883469627
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
        (("" (flatten)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (assert)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (use "dom_basic_sub2")
                            (("1" (replace -3)
                              (("1"
                                (split -1)
                                (("1"
                                  (hide 5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "img_dom_singleton")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 5)
                                          (("1"
                                            (rewrite
                                             "vars_singleton"
                                             5)
                                            (("1"
                                              (replace -4 5 :dir rl)
                                              (("1"
                                                (expand "subs" 5)
                                                (("1"
                                                  (expand "subs" 5)
                                                  (("1"
                                                    (expand "subs" 5 2)
                                                    (("1"
                                                      (expand "subs" 5)
                                                      (("1"
                                                        (rewrite
                                                         "ext_vars")
                                                        (("1"
                                                          (rewrite
                                                           "ext_vars")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 6)
                                  (("2"
                                    (use "img_dom_emptyset")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -2)
                        (("1" (flatten)
                          (("1" (hide -2 6 7) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide-all-but (5 -1))
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (rewrite "dom_null")
                                (("2" (rewrite "img_null") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (dom_basic_sub2 formula-decl nil substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars_singleton formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_vars formula-decl nil term_properties nil)
    (img_dom_singleton formula-decl nil substitution nil)
    (img_dom_emptyset formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (dom_null formula-decl nil substitution nil)
    (img_null formula-decl nil substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (inst_step_vars_context_aux 0
  (inst_step_vars_context_aux-1 nil 3882712498
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (lift-if)
        (("" (split 1)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (expand "subset?" 1)
                      (("1" (skeep)
                        (("1" (rewrite "vars_append_context")
                          (("1" (expand ("member" "union") -2)
                            (("1" (prop)
                              (("1"
                                (use "fresh_subs?_var")
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand ("member" "union") -1)
                                        (("1"
                                          (expand ("member" "union") 1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "img_basic_sub_var")
                                              (("1"
                                                (rewrite "ext_vars" -1)
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst -1 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ("member" "union") 1)
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but 2) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (split 3)
                      (("1" (flatten)
                        (("1" (hide 4)
                          (("1" (expand "subset?" 1)
                            (("1" (rewrite "vars_append_context")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand ("member" "union") -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use "fresh_subs?_var")
                                      (("1"
                                        (expand "subset?" -1)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "img_basic_sub_var")
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "ext_vars")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   ("member" "union")
                                                   1)
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand ("member" "union") 1)
                                      (("2" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 2)
                          (("2" (expand "subset?")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 1 3)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (rewrite "vars_append_context")
                            (("1" (expand "subset?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand ("member" "union"))
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "vars_mem_context")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (rewrite "fc_member")
                                          (("1"
                                            (flatten)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (split 3)
                      (("1" (flatten)
                        (("1" (rewrite "vars_append_context")
                          (("1" (expand "subset?")
                            (("1" (skeep)
                              (("1"
                                (expand ("member" "union") 1)
                                (("1"
                                  (expand ("member" "union") -2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use "fresh_subs?_var")
                                      (("1"
                                        (expand "subset?" -1)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               ("member" "union")
                                               -1)
                                              (("1"
                                                (use
                                                 "img_basic_sub_var")
                                                (("1"
                                                  (expand "subset?" -1)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "ext_vars")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but 2) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fc def-decl "fresh_context" freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (fc_member formula-decl nil freshness nil)
    (vars_mem_context formula-decl nil freshness nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (fresh_subs?_var formula-decl nil fresh_subs nil)
    (ext_vars formula-decl nil term_properties nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (empty? const-decl "bool" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (img_basic_sub_var formula-decl nil substitution nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (fresh_subs? def-decl "[fresh_context, bool]" fresh_subs nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_append_context formula-decl nil freshness nil)
    (subset? const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (inst_step_well_formed_aux 0
  (inst_step_well_formed_aux-1 nil 3882720699
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (split)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (use "well_formed_basic_sub")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "well_formed_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (use "well_formed_basic_sub")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (rewrite "well_formed_null") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (use "well_formed_basic_sub")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "well_formed_null") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "well_formed_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (rewrite "well_formed_null") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_basic_sub formula-decl nil substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (well_formed_null formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (inst_step_idempotent2 0
  (inst_step_idempotent2-1 nil 3882541896
   ("" (skeep)
    (("" (expand "inst_step" 1)
      (("" (split)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split 3)
                (("1" (flatten)
                  (("1" (rewrite "idempotent_cons") nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split 2)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (rewrite "idempotent_cons") nil nil)
                     ("2" (rewrite "idempotent_cons") nil nil)
                     ("3" (rewrite "idempotent_null") nil nil)
                     ("4" (rewrite "idempotent_null") nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_null") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split 2)
            (("1" (flatten)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (split 3)
                    (("1" (flatten)
                      (("1" (rewrite "idempotent_cons") nil nil)) nil)
                     ("2" (flatten)
                      (("2" (rewrite "idempotent_null") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (rewrite "idempotent_null") nil nil)) nil))
                nil))
              nil)
             ("2" (flatten) (("2" (rewrite "idempotent_null") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idempotent_cons formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (idempotent_null formula-decl nil substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil))
   shostak))
 (inst_step_inst_ptc_vars_img 0
  (inst_step_inst_ptc_vars_img-1 nil 3883202606
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "inst_ptc?" -1)
          (("" (flatten)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (expand "inst_step" -1)
                  (("" (assert)
                    (("" (lift-if)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (replace -2 3 :dir rl)
                                (("1"
                                  (use "img_basic_sub_var")
                                  (("1"
                                    (rewrite "ext_vars" -1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 4 :dir rl)
                                (("2"
                                  (rewrite "img_null")
                                  (("2"
                                    (hide-all-but 4)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use "img_basic_sub_var")
                                      (("1"
                                        (rewrite "ext_vars" -1)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (replace -1 4 :dir rl)
                                        (("2"
                                          (rewrite "img_null")
                                          (("2"
                                            (hide-all-but 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (hide-all-but 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ext_vars formula-decl nil term_properties nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (ext def-decl "term" term_properties nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (img_basic_sub_var formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (img_null formula-decl nil substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (append def-decl "list[T]" list_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (inst_step_inst_ptc_dom_TCC1 0
  (inst_step_inst_ptc_dom_TCC2-1 nil 3883484550 ("" (grind) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_unification nil))
   nil
   (inst_step_inst_ptc_dom subtype "inst_step.s"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].var?)")))
 (inst_step_inst_ptc_dom 0
  (inst_step_inst_ptc_dom-1 nil 3883484550
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (name "delta" "inst_step(PV, G, t, s)`2")
          (("" (replace -1)
            (("" (expand "inst_ptc?" -2)
              (("" (flatten)
                (("" (expand "inst_step" -1)
                  (("" (lift-if)
                    (("" (assert)
                      (("" (split -)
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (use "dom_basic_sub2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (case "member(V(s), dom(delta))")
                                      (("1"
                                        (replace -2)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "dom" 1)
                                        (("2"
                                          (expand "member" 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -4 -1 :dir rl)
                                              (("2"
                                                (expand "subs" -1)
                                                (("2"
                                                  (expand "subs" -1)
                                                  (("2"
                                                    (expand
                                                     "subs"
                                                     -1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "subs"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "subset?"
                                                         -5)
                                                        (("2"
                                                          (rewrite
                                                           "ext_append"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "ext_vars")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "inst_step" 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -2)
                            (("2" (expand "subset?" -2)
                              (("2"
                                (inst -2 "V(s)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dom_basic_sub2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (subset? const-decl "bool" sets nil)
    (ext_vars formula-decl nil term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ext_append formula-decl nil term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (inst_step_inst_ptc_vars_img2 0
  (inst_step_inst_ptc_vars_img2-1 nil 3883377042
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (use "inst_step_inst_ptc_vars_img")
          (("" (assert)
            (("" (assert)
              (("" (expand "inst_ptc?" -2)
                (("" (flatten)
                  (("" (hide -3)
                    (("" (expand "subset?")
                      (("" (skeep)
                        (("" (inst -2 "x")
                          (("" (inst -1 "x") (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_inst_ptc_vars_img formula-decl nil inst_step nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_unification nil))
   shostak))
 (inst_step_inst_ptc 0
  (inst_step_inst_ptc-1 nil 3883207735
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
          (("" (reveal -1)
            (("" (expand "inst_step" -1 1)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (replace -2 4 :dir rl)
                            (("1" (expand "subs" 4)
                              (("1"
                                (expand "subs" 4)
                                (("1"
                                  (expand "subs" 4 2)
                                  (("1"
                                    (expand "subs" 4)
                                    (("1"
                                      (rewrite "ext_identity")
                                      (("1"
                                        (rewrite "ext_vars")
                                        (("1"
                                          (expand "inst_ptc?" -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -2)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (expand "inst_ptc?" -3)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "inst_step" 2)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (expand "inst_ptc?" -4)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ext_vars formula-decl nil term_properties nil)
    (ext_identity formula-decl nil term_properties nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (subs const-decl "term" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (inst_step_match_img 0
  (inst_step_match_img-1 nil 3883497773
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "delta" "inst_step(PV, G, t, s)`2")
        (("" (prop)
          (("" (reveal -1)
            (("" (expand "inst_step" -1)
              (("" (lift-if)
                (("" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (expand "match_condition2?" -4)
                              (("1"
                                (inst -4 "V(s)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (skolem -1 ("up" "i"))
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case "i = 0")
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (use
                                                   "img_basic_sub2")
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "vars_singleton"
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "ext_vars")
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -6)
                                                              (("1"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide-all-but
                                                           3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -5 "0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (hide-all-but (-7 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "rhs" 1)
                                    (("2"
                                      (expand "sec_proj" 1)
                                      (("2"
                                        (expand "vars" 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (hide-all-but 4)
                                  (("2"
                                    (rewrite "img_null")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton")
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition2?"
                                                   -6)
                                                  (("1"
                                                    (inst -6 "x")
                                                    (("1"
                                                      (split -6)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-5
                                                                      -10
                                                                      2))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-10
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 4)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (hide-all-but 5)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (use "img_basic_sub2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "vars_singleton" 4)
                                          (("1"
                                            (rewrite "ext_vars")
                                            (("1"
                                              (expand "subset?" 4)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "match_condition2?"
                                                   -5)
                                                  (("1"
                                                    (inst -5 "x")
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         ("up" "i"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "i = 0")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_ptc?"
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-9
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-5 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (hide-all-but 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (hide-all-but 5)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace -1 :dir rl)
                          (("2" (hide-all-but 3)
                            (("2" (rewrite "img_null")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (match_condition2? const-decl "bool" aux_unification nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (img_basic_sub2 formula-decl nil substitution nil)
    (ext def-decl "term" term_properties nil)
    (reverse def-decl "list[T]" list_props nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (vars_singleton formula-decl nil term_properties nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (ext_vars formula-decl nil term_properties nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (rhs const-decl "args" unification nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (img_null formula-decl nil substitution nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_inst_ptc_match 0
  (inst_step_inst_ptc_match-1 nil 3883156244
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition?" 1)
          (("" (skeep)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (case "NOT member(X, dom(del))")
                  (("1" (case "member(X, vars(img(del)))")
                    (("1" (use "inst_step_inst_ptc_vars_img")
                      (("1" (assert)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inst_ptc?" -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "subset?" -4)
                                        (("1"
                                          (inst -4 "X")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "match_condition?" -3)
                      (("2" (inst -3 "X")
                        (("2" (prop)
                          (("1" (skolem -1 ("up" "i"))
                            (("1" (prop)
                              (("1"
                                (inst 4 "apply_sub(del, up)" "i")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "apply_sub_len")
                                    nil
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (rewrite "apply_sub_nth")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "member" -3)
                                    (("3"
                                      (expand "member" 1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (expand "apply_sub" 1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (expand
                                               ("member" "dom")
                                               4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "subs" -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ("member" "dom") 4)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -6)
                                              (("2"
                                                (expand "apply_sub" 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "inst_ptc?" -4)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand "inst_ptc?" 1)
                                        (("4"
                                          (expand "member" -3)
                                          (("4"
                                            (split -3)
                                            (("1"
                                              (expand "subset?" -4)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (inst -4 "X")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 1
                                                 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (hide -7)
                                                          (("1"
                                                            (expand
                                                             "subset?"
                                                             1)
                                                            (("1"
                                                              (skolem
                                                               1
                                                               "Y")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Y")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -1)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (use
                                                                               "inst_step_inst_ptc_vars_img")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -10)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -10
                                                                                          1))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "member"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "dom"
                                                         3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             -7)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (inst -7 "j")
                                      (("5"
                                        (prop)
                                        (("1"
                                          (expand "member" -3)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite "apply_sub_nth")
                                              (("1"
                                                (expand "apply_sub" -1)
                                                (("1"
                                                  (use "vars_subs_t")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "subset?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "X")
                                                          (("1"
                                                            (expand
                                                             "vars"
                                                             -1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "singleton")
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "union"
                                                                 -1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "inst_ptc?"
                                                                     -3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -3)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "X")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "inst_ptc?" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "inst_ptc?"
                                                   -2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (rewrite
                                                       "apply_sub_nth"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "apply_sub"
                                                         1)
                                                        (("2"
                                                          (use
                                                           "vars_subs_t")
                                                          (("2"
                                                            (case
                                                             "subset?(vars(img(del)), PV)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                -4
                                                                1))
                                                              (("1"
                                                                (expand
                                                                 "subset?")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               4
                                                               5
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (use
                                                                 "inst_step_inst_ptc_vars_img")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -9)
                                                                    (("2"
                                                                      (expand
                                                                       "inst_ptc?"
                                                                       -10)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -10
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "subset?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "apply_sub_nth" -2)
                                          (("2"
                                            (expand "member" -2)
                                            (("2"
                                              (expand "member" 1)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (expand
                                                   "apply_sub"
                                                   -1)
                                                  (("1"
                                                    (use "subs_var")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "member(V(nth(P, j)`1), dom(del))")
                                                        (("1"
                                                          (rewrite
                                                           "vars_finset")
                                                          (("1"
                                                            (inst
                                                             4
                                                             "subs(del)(V(nth(P, j)`1))")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "img"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "V(nth(P, j)`1)")
                                                                    (("1"
                                                                      (expand
                                                                       "member"
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "subs"
                                                                 1)
                                                                (("2"
                                                                  (name-replace
                                                                   "t1"
                                                                   "nth(P, j)`1")
                                                                  (("2"
                                                                    (use
                                                                     "term_times_eta")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "subs_ext_pi"
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "ext_vars")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand
                                                                               "subs"
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (name-replace
                                                           "t1"
                                                           "nth(P, j)`1")
                                                          (("2"
                                                            (reveal -1)
                                                            (("2"
                                                              (use
                                                               "subs_no_effect_t")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "disjoint?"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "empty?"
                                                                     1)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         ("member"
                                                                          "intersection")
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "vars"
                                                                           -1)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "singleton")
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "apply_sub"
                                                   -1)
                                                  (("2"
                                                    (name-replace
                                                     "t1"
                                                     "nth(P, j)`2")
                                                    (("2"
                                                      (use "subs_var")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "member(V(t1), dom(del))")
                                                          (("1"
                                                            (rewrite
                                                             "vars_finset")
                                                            (("1"
                                                              (inst
                                                               4
                                                               "subs(del)(V(t1))")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   ("member"
                                                                    "img")
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "V(t1)")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "term_times_eta")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -4
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       "subs_ext_pi"
                                                                       -4)
                                                                      (("2"
                                                                        (use
                                                                         "ext_vars")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "subs_no_effect_t")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vars"
                                                                 1)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    2))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 5)
                            (("2" (rewrite "vars_args")
                              (("2"
                                (rewrite "vars_args")
                                (("2"
                                  (skolem -3 "t1")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "rhs" -3)
                                      (("2"
                                        (rewrite "sec_proj_mem" -3)
                                        (("2"
                                          (skolem -3 "up")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "apply_sub_unif_pair")
                                              (("2"
                                                (skolem -3 "up1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -4 -5)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -5)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "up1`2")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "rhs"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "sec_proj_mem"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "up1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (use
                                                               "vars_subs_t")
                                                              (("2"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "apply_sub_elim_var2")
                    (("2" (inst -1 "del" "P")
                      (("2" (prop)
                        (("1" (expand "disjoint?" -1)
                          (("1" (expand "empty?" -1)
                            (("1" (inst -1 "X")
                              (("1"
                                (expand ("member" "intersection") 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1"
                                      (rewrite "vars_unif_prb")
                                      (("1"
                                        (rewrite "vars_args")
                                        (("1"
                                          (skolem -1 "t1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 1 "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rhs" -1)
                                                  (("1"
                                                    (rewrite
                                                     "sec_proj_mem"
                                                     -1)
                                                    (("1"
                                                      (skolem -1 "up")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           "member_unif_prb_equiv"
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "up")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "del")
                            (("2" (use "inst_step_idempotent2") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apply_sub_elim_var2 formula-decl nil unification nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (vars_unif_prb formula-decl nil unification nil)
    (inst_step_idempotent2 formula-decl nil inst_step nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (inst_step_inst_ptc_vars_img formula-decl nil inst_step nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (sec_proj_mem formula-decl nil list_theory2 nil)
    (apply_sub_unif_pair formula-decl nil unification nil)
    (vars_args formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (subs_var formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (term_times_eta formula-decl nil term_adt nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (ext_vars formula-decl nil term_properties nil)
    (vars_finset formula-decl nil term_properties nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (empty? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs const-decl "term" substitution nil)
    (apply_sub_nth formula-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step_inst_ptc_match2 0
  (inst_step_inst_ptc_match2-1 nil 3883324156
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition2?" 1)
          (("" (skeep)
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (reveal -1)
                (("" (case "NOT member(X, dom(del))")
                  (("1" (case "member(X, vars(img(del)))")
                    (("1" (use "inst_step_inst_ptc_vars_img")
                      (("1" (assert)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (expand "subset?" -1)
                              (("1"
                                (inst -1 "X")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "inst_ptc?" -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "subset?" -4)
                                        (("1"
                                          (inst -4 "X")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "match_condition2?" -3)
                      (("2" (inst -3 "X")
                        (("2" (prop)
                          (("1" (skolem -1 ("up" "i"))
                            (("1" (prop)
                              (("1"
                                (inst 4 "apply_sub(del, up)" "i")
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "apply_sub_len")
                                    nil
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2"
                                      (rewrite "apply_sub_nth")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "member" -3)
                                    (("3"
                                      (expand "member" 1)
                                      (("3"
                                        (prop)
                                        (("1"
                                          (expand "apply_sub" 1)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (expand
                                               ("member" "dom")
                                               4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "subs" -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ("member" "dom") 4)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "subs" -6)
                                              (("2"
                                                (expand "apply_sub" 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "inst_ptc?" -4)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (expand "inst_ptc?" 1)
                                        (("4"
                                          (expand "member" -3)
                                          (("4"
                                            (split -3)
                                            (("1"
                                              (expand "subset?" -4)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (inst -4 "X")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :dir rl)
                                              (("2"
                                                (expand
                                                 "apply_sub"
                                                 1
                                                 2)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (hide -7)
                                                          (("1"
                                                            (expand
                                                             "subset?"
                                                             1)
                                                            (("1"
                                                              (skolem
                                                               1
                                                               "Y")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Y")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           ("member"
                                                                            "union")
                                                                           -1)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (use
                                                                               "inst_step_inst_ptc_vars_img")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -10)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -10
                                                                                          1))
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -6
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "member"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "dom"
                                                         3)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "subs"
                                                             -7)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (inst -7 "j")
                                      (("5"
                                        (prop)
                                        (("5"
                                          (expand "vars" -2)
                                          (("5"
                                            (expand
                                             ("member" "union")
                                             -2)
                                            (("5"
                                              (expand "vars" 1)
                                              (("5"
                                                (expand
                                                 ("member" "union")
                                                 1)
                                                (("5"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("1"
                                                        (use
                                                         "vars_subs_t")
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_nth"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("2"
                                                        (use
                                                         "vars_subs_t")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "X")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 5)
                            (("2" (rewrite "vars_args")
                              (("2"
                                (rewrite "vars_args")
                                (("2"
                                  (skolem -3 "t1")
                                  (("2"
                                    (prop)
                                    (("2"
                                      (expand "rhs" -3)
                                      (("2"
                                        (rewrite "sec_proj_mem" -3)
                                        (("2"
                                          (skolem -3 "up")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "apply_sub_unif_pair")
                                              (("2"
                                                (skolem -3 "up1")
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (replace -4 -5)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -5)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "up1`2")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "rhs"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "sec_proj_mem"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "up1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (use
                                                               "vars_subs_t")
                                                              (("2"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "apply_sub_elim_var2")
                    (("2" (inst -1 "del" "P")
                      (("2" (prop)
                        (("1" (expand "disjoint?" -1)
                          (("1" (expand "empty?" -1)
                            (("1" (inst -1 "X")
                              (("1"
                                (expand ("member" "intersection") 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-5 1))
                                    (("1"
                                      (rewrite "vars_unif_prb")
                                      (("1"
                                        (rewrite "vars_args")
                                        (("1"
                                          (skolem -1 "t1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst 1 "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rhs" -1)
                                                  (("1"
                                                    (rewrite
                                                     "sec_proj_mem"
                                                     -1)
                                                    (("1"
                                                      (skolem -1 "up")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (rewrite
                                                           "member_unif_prb_equiv"
                                                           1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "up")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "del")
                            (("2" (use "inst_step_idempotent2") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition2? const-decl "bool" aux_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (apply_sub_len formula-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (apply_sub_nth formula-decl nil unification nil)
    (subs const-decl "term" substitution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" unification nil)
    (union const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (vars_subs_t formula-decl nil substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil unification nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (rhs const-decl "args" unification nil)
    (args type-eq-decl nil term_properties nil)
    (vars_args formula-decl nil term_properties nil)
    (apply_sub_unif_pair formula-decl nil unification nil)
    (sec_proj_mem formula-decl nil list_theory2 nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (inst_step_inst_ptc_vars_img formula-decl nil inst_step nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (inst_step_idempotent2 formula-decl nil inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil unification nil)
    (member_unif_prb_equiv formula-decl nil unification nil)
    (intersection const-decl "set" sets nil)
    (apply_sub_elim_var2 formula-decl nil unification nil))
   shostak))
 (inst_step_match_condition_apply_sub 0
  (inst_step_match_condition_apply_sub-1 nil 3883380777
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (name-replace "skp" "inst_step(PV, G, t, s)`3")
          (("" (name-replace "fai" "inst_step(PV, G, t, s)`4")
            (("" (name-replace "del" "inst_step(PV, G, t, s)`2")
              (("" (expand "match_condition2?" 3)
                (("" (skeep)
                  (("" (reveal -1)
                    (("" (case "NOT member(X, vars(img(del)))")
                      (("1" (expand "match_condition2?" -2)
                        (("1" (inst -2 "X")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (case "NOT member(X, dom(del))")
                                (("1"
                                  (skolem -1 ("up" "i"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "i = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -6)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (expand "member" -4)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -5 5))
                                                    (("1"
                                                      (expand
                                                       "inst_ptc?"
                                                       -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "subset?"
                                                           -2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 6)
                                                    (("2"
                                                      (use
                                                       "inst_step_inst_ptc_dom")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "fai"
                                                           4)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "member"
                                                                     5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         7
                                         "nth(apply_sub(del, P), i-1)"
                                         "i-1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "apply_sub_len" 1)
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (expand
                                                     "apply_sub"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           -3)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "inst_ptc?"
                                                               -4)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      8))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (lemma
                                                                   "subs_no_effect_t")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "del"
                                                                     "null * X")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          5))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "apply_sub_nth" 1)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 :dir rl)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (expand
                                                       "member"
                                                       -3)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -4 7))
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "inst_ptc?"
                                                             1)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-4
                                                                  -5
                                                                  1))
                                                                (("1"
                                                                  (expand
                                                                   "subset?"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "apply_sub"
                                                                     1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (use
                                                                         "vars_subs_t")
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_match_img")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subset?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "match_condition2?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "inst_ptc?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "apply_sub"
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (use
                                                                     "subs_no_effect_t")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          4))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (inst -7 "j+1")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (expand "nth" 3)
                                                  (("4"
                                                    (rewrite
                                                     "apply_sub_nth")
                                                    (("1"
                                                      (expand
                                                       "apply_sub"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "vars"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "vars"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               3)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lemma
                                                                   "vars_subs_t")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (expand
                                                                         "subset?")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (rewrite "apply_sub_len")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "length" -1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (hide -2 5)
                                    (("2"
                                      (skolem -3 "t1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -3 "s1")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (replace -4 -5)
                                                (("2"
                                                  (use
                                                   "apply_sub_elim_var_t")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 6)
                                (("2"
                                  (rewrite "vars_args")
                                  (("2"
                                    (rewrite "vars_args")
                                    (("2"
                                      (skolem -2 "t_del")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (rewrite "apply_sub_rhs")
                                          (("2"
                                            (skolem -2 "s1")
                                            (("2"
                                              (inst 1 "s1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (expand "rhs")
                                                    (("1"
                                                      (expand
                                                       "sec_proj"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -3 -4)
                                                    (("2"
                                                      (use
                                                       "vars_subs_t")
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (inst -1 "X")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               ("member"
                                                                "union")
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4)
                        (("2" (use "inst_step_dom_img")
                          (("2" (assert)
                            (("2" (replace -3)
                              (("2"
                                (case
                                 "(dom(del) = emptyset AND img(del) = emptyset)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2 -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "(var?(s) AND dom(del) = singleton(V(s)) AND vars(img(del)) = vars(t))")
                                  (("1"
                                    (hide -2 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "match_condition2?" -6)
                                        (("1"
                                          (inst -6 "V(s)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 ("up" "i"))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case "i = 0")
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (expand
                                                             "inst_ptc?"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "subset?"
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "X")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -5 "0")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "vars"
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "union"
                                                               2)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton"
                                                                       3)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rhs" 1)
                                              (("2"
                                                (expand "sec_proj" 1)
                                                (("2"
                                                  (expand "vars" 1)
                                                  (("2"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (expand
                                                         "vars"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "singleton")
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (use
                                               "inst_step_dom_PV_aux")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "del" -4)
                                                  (("3"
                                                    (replace -4 -1)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -2))
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (expand "match_condition2?" -6)
                                        (("3"
                                          (inst -6 "X")
                                          (("3"
                                            (split -6)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skolem -1 ("up" "i"))
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "i = 0")
                                                    (("1"
                                                      (hide -6)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -4)
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      4))
                                                                    (("1"
                                                                      (expand
                                                                       "inst_ptc?"
                                                                       -2)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "X")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "inst_step_chooses_rhs")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (reveal
                                                                           -5
                                                                           -6
                                                                           -7)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -3
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          7))
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4)
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             2)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -5
                                                                  2))
                                                                (("2"
                                                                  (expand
                                                                   "subset?"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "del"
                                                                     -2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3)
                                              (("2"
                                                (expand "rhs" 1)
                                                (("2"
                                                  (expand "sec_proj" 1)
                                                  (("2"
                                                    (expand "vars" 1)
                                                    (("2"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition2? const-decl "bool" aux_unification nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (inst_step_chooses_rhs formula-decl nil inst_step nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (inst_step_img formula-decl nil inst_step nil)
    (inst_step_dom_PV_aux formula-decl nil inst_step nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (singleton? const-decl "bool" sets nil)
    (inst_step_dom_img formula-decl nil inst_step nil)
    (member def-decl "bool" list_props nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (unif_pair type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vars_subs_t formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (inst_step_match_img formula-decl nil inst_step nil)
    (apply_sub_nth formula-decl nil unification nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subs const-decl "term" substitution nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (apply_sub_len formula-decl nil unification nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (member const-decl "bool" unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step_inst_ptc_dom formula-decl nil inst_step nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset? const-decl "bool" sets nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (apply_sub_rhs formula-decl nil unification nil)
    (vars_args formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (inst_step_match_condition_cdr 0
  (inst_step_match_condition_cdr-1 nil 3883330326
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (expand "match_condition2?")
          (("" (skeep)
            (("" (inst -2 "X")
              (("" (prop)
                (("1" (skolem -1 ("up" "i"))
                  (("1" (flatten)
                    (("1" (case "i = 0")
                      (("1" (expand "nth" -3)
                        (("1" (assert)
                          (("1" (expand "inst_ptc?" -5)
                            (("1" (flatten)
                              (("1"
                                (expand "member" -4)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "up" "i-1")
                        (("1" (expand "length" -1)
                          (("1" (assert)
                            (("1" (expand "nth" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "j+1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "rhs")
                  (("2" (expand "sec_proj" 1)
                    (("2" (expand "vars" 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_condition2? const-decl "bool" aux_unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (rhs const-decl "args" unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "term" term_properties nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" unification nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (inst_step_fail 0
  (inst_step_fail-1 nil 3882609581
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" -3)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" -9)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (inst -7 "cdr(P)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" -8)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -3)
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step1_no_effect 0
  (inst_step1_no_effect-1 nil 3882710844
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (prop) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -7 "cdr(P)")
                                        (("2"
                                          (expand "length" -7 2)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -4)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step1_no_effect_cor 0
  (inst_step1_no_effect_cor-1 nil 3882711145
   ("" (skeep) (("" (use "inst_step1_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step1_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step1_no_effect_cor2 0
  (inst_step1_no_effect_cor2-1 nil 3882711164
   ("" (skeep) (("" (use "inst_step1_no_effect") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step1_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step3_no_effect 0
  (inst_step3_no_effect-1 nil 3882538498
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "inst_step" 1 1)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (prop)
                                  (("1"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("1"
                                      (expand "inst_step" 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("2"
                                      (expand "inst_step" 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -7)
                                          (("2"
                                            (inst -1 "cdr(P)")
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("3"
                                      (expand "inst_step" 2 2)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (reveal -7)
                                                (("3"
                                                  (inst
                                                   -1
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -1
                                                       2)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step3_no_effect_cor 0
  (inst_step3_no_effect_cor-1 nil 3882538880
   ("" (skeep) (("" (use "inst_step3_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step3_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step_sub_append 0
  (inst_step_sub_append-1 nil 3882539294
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" 1)
                    (("1" (assert)
                      (("1" (expand "append" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "append" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (expand "length" -7 2)
                                              (("2"
                                                (assert)
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -4)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (rewrite "append_null")
                                              (("3"
                                                (replace -2)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst
                                                           -5
                                                           "G1"
                                                           "PV"
                                                           "apply_sub(del, Ps)"
                                                           "del")
                                                          (("3"
                                                            (replace
                                                             -5)
                                                            (("3"
                                                              (hide -5)
                                                              (("3"
                                                                (reveal
                                                                 -3)
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "apply_sub(del, cdr(P))")
                                                                  (("3"
                                                                    (rewrite
                                                                     "apply_sub_len")
                                                                    (("3"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       2)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "G1"
                                                                           "PV"
                                                                           "apply_sub(del, Ps)"
                                                                           "append(del, sigma)")
                                                                          (("3"
                                                                            (replace
                                                                             -1)
                                                                            (("3"
                                                                              (rewrite
                                                                               "append_assoc")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append_assoc formula-decl nil list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_sub_append_cor 0
  (inst_step_sub_append_cor-1 nil 3882540285
   ("" (skeep)
    (("" (use "inst_step_sub_append") (("" (assert) nil nil)) nil))
    nil)
   ((inst_step_sub_append formula-decl nil inst_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inst_step4_no_effect 0
  (inst_step4_no_effect-1 nil 3882604152
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -3)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -2)
                                            (("3"
                                              (replace -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step4_no_effect_cor 0
  (inst_step4_no_effect_cor-1 nil 3882604403
   ("" (skeep) (("" (use "inst_step4_no_effect") nil nil)) nil)
   ((sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step4_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step4_no_effect2 0
  (inst_step4_no_effect2-1 nil 3882606693
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -3)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -1)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (inst
                                                 -5
                                                 "apply_sub(del, cdr(P))")
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "apply_sub_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub_len formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step4_no_effect2_cor 0
  (inst_step4_no_effect2_cor-1 nil 3882607327
   ("" (skeep) (("" (use "inst_step4_no_effect2") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step4_no_effect2 formula-decl nil inst_step nil))
   shostak))
 (inst_step2_no_effect 0
  (inst_step2_no_effect-1 nil 3882605191
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "inst_step" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst -7 "cdr(P)")
                                            (("2"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "inst_step" 2 2)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (replace -4)
                                            (("3"
                                              (replace -2)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (inst
                                                   -5
                                                   "apply_sub(del, cdr(P))")
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (append def-decl "list[T]" list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step2_no_effect_cor 0
  (inst_step2_no_effect_cor-1 nil 3882605614
   ("" (skeep) (("" (use "inst_step2_no_effect") nil nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inst_step2_no_effect formula-decl nil inst_step nil))
   shostak))
 (inst_step2_append 0
  (inst_step2_append-1 nil 3882603212
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 2 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "inst_step" 1)
                    (("1" (assert)
                      (("1" (rewrite "apply_sub_null")
                        (("1" (expand "append" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "fai" -1)
                                  (("1"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("1"
                                      (expand "inst_step" 3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (reveal -1 -2 -3 -4 -5 -6)
                                  (("2"
                                    (expand "inst_step" 1 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (expand "inst_step" 1 3)
                                            (("2"
                                              (rewrite
                                               "inst_step3_no_effect_cor"
                                               1)
                                              (("2"
                                                (name-replace
                                                 "del2"
                                                 "inst_step(PV, G, cdr(P), null, null)`3")
                                                (("2"
                                                  (reveal -1)
                                                  (("2"
                                                    (inst -9 "cdr(P)")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -9
                                                       2)
                                                      (("2"
                                                        (inst
                                                         -9
                                                         "G"
                                                         "PV"
                                                         "cons((t, s), null)")
                                                        (("2"
                                                          (case
                                                           "inst_step(PV, G, cdr(P), null, null)`4")
                                                          (("1"
                                                            (expand
                                                             "inst_step"
                                                             4)
                                                            (("1"
                                                              (rewrite
                                                               "inst_step4_no_effect_cor"
                                                               4)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prop)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (reveal
                                                                     -3)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "cdr(P)")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "PV"
                                                                           "cons((t, s), Ps)")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_assoc"
                                                                                 2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     2
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "apply_sub"
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         2
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append"
                                                                                           2
                                                                                           3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "apply_sub"
                                                                                             2
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (reveal -1 -2 -3 -4 -5 -6)
                                    (("3"
                                      (expand "inst_step" 2 2)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (rewrite
                                                   "append_null")
                                                  (("3"
                                                    (expand
                                                     "apply_sub"
                                                     2
                                                     4)
                                                    (("3"
                                                      (rewrite
                                                       "inst_step2_no_effect_cor")
                                                      (("3"
                                                        (rewrite
                                                         "inst_step2_no_effect_cor")
                                                        (("3"
                                                          (lemma
                                                           "inst_step2_no_effect_cor")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "G1"
                                                             "apply_sub(del, cdr(P))"
                                                             "PV"
                                                             "null"
                                                             "del")
                                                            (("3"
                                                              (replace
                                                               -1)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (expand
                                                                   "inst_step"
                                                                   2
                                                                   3)
                                                                  (("3"
                                                                    (replace
                                                                     -5)
                                                                    (("3"
                                                                      (replace
                                                                       -6)
                                                                      (("3"
                                                                        (replace
                                                                         -4)
                                                                        (("3"
                                                                          (replace
                                                                           -3)
                                                                          (("3"
                                                                            (rewrite
                                                                             "append_null")
                                                                            (("3"
                                                                              (expand
                                                                               "apply_sub"
                                                                               2
                                                                               6)
                                                                              (("3"
                                                                                (rewrite
                                                                                 "inst_step_sub_append_cor"
                                                                                 2)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "apply_sub_sub_append"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -7
                                                                                     "apply_sub(del, cdr(P))")
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_step"
                                                                                             5)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "apply_sub"
                                                                                                       5
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "append_null")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "inst_step4_no_effect2_cor"
                                                                                                           5)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "apply_sub_len")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (apply_sub_null formula-decl nil unification nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (append_assoc formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step4_no_effect_cor formula-decl nil inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step4_no_effect2_cor formula-decl nil inst_step nil)
    (apply_sub_sub_append formula-decl nil unification nil)
    (inst_step2_no_effect_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil))
   shostak))
 (inst_step2_mem 0
  (inst_step2_mem-1 nil 3882602752
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (expand "member" -1) (("1" (propax) nil nil))
                  nil)
                 ("2" (flatten)
                  (("2" (name-replace "t1" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t1, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t1, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t1, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t1, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "member" -2)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (use "inst_step2_append")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (name-replace
                                         "del1"
                                         "inst_step(PV, G, cdr(P), null, null)`3")
                                        (("1"
                                          (replace -1 -3)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "member_unif_prb_append")
                                              (("1"
                                                (reveal -2)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst -4 "cdr(P)")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -4
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skolem
                                                               -4
                                                               "s1")
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "s1")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (reveal
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11)
                                                                    (("1"
                                                                      (expand
                                                                       "inst_step"
                                                                       3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "inst_step3_no_effect_cor"
                                                                           4)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "member"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "apply_sub"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "apply_sub"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "skp"
                                                         -3)
                                                        (("2"
                                                          (hide -4)
                                                          (("2"
                                                            (lemma
                                                             "inst_step_skip")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "member"
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         -3)
                                                                        (("2"
                                                                          (split
                                                                           -3)
                                                                          (("1"
                                                                            (reveal
                                                                             -10
                                                                             -11)
                                                                            (("1"
                                                                              (split
                                                                               -3)
                                                                              (("1"
                                                                                (inst
                                                                                 3
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "del1"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "inst_step"
                                                                                         1)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "fai"
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "inst_step3_no_effect_cor"
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 3
                                                                                 "s")
                                                                                (("2"
                                                                                  (split
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "del1"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "inst_step"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "fai"
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "inst_step3_no_effect_cor"
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -4 3)
                                        (("2"
                                          (reveal -3 -4 -5 -6 -7 -8)
                                          (("2"
                                            (lemma "inst_step_fail")
                                            (("2"
                                              (inst
                                               -1
                                               "G"
                                               "cdr(P)"
                                               "PV"
                                               "cons((t1, s), null)"
                                               "null")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "inst_step4_no_effect_cor"
                                                   -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" -1 2)
                                    (("3"
                                      (rewrite
                                       "inst_step2_no_effect_cor"
                                       -1)
                                      (("3"
                                        (inst
                                         -2
                                         "apply_sub(del, cdr(P))")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skolem -1 "s1")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (name-replace
                                                     "del2"
                                                     "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                    (("1"
                                                      (reveal -1)
                                                      (("1"
                                                        (rewrite
                                                         "apply_sub_mem"
                                                         -2)
                                                        (("1"
                                                          (skolem
                                                           -2
                                                           "s2")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               4
                                                               "s2")
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 4)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (reveal
                                                                     -1
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9)
                                                                    (("1"
                                                                      (expand
                                                                       "inst_step"
                                                                       4)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "append_null")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     6
                                                                                     2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "inst_step_sub_append_cor"
                                                                                       6)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "subs_append2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "apply_sub_len")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil inst_step nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (subs_append2 formula-decl nil substitution nil)
    (apply_sub_mem formula-decl nil unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step2_append formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (member_unif_prb_append formula-decl nil unification nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (inst_step_skip formula-decl nil inst_step nil)
    (inst_step4_no_effect_cor formula-decl nil inst_step nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "term" term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (inst_step_fail formula-decl nil inst_step nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step2_mem_rhs 0
  (inst_step2_mem_rhs-1 nil 3883547155
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (flatten)
        (("" (skeep)
          (("" (hide -1)
            ((""
              (name-replace "delta"
               "inst_step(PV, G, P, null, null)`3")
              (("" (reveal -1)
                ((""
                  (name-replace "P1"
                   "inst_step(PV, G, P, null, null)`2")
                  (("" (reveal -1)
                    (("" (expand "inst_step" -1)
                      (("" (lift-if)
                        (("" (split -1)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (name-replace "t1" "car(P)`1")
                              (("1"
                                (name-replace "s" "car(P)`2")
                                (("1"
                                  (name-replace
                                   "G1"
                                   "inst_step(PV, G, t1, s)`1")
                                  (("1"
                                    (name-replace
                                     "del"
                                     "inst_step(PV, G, t1, s)`2")
                                    (("1"
                                      (name-replace
                                       "skp"
                                       "inst_step(PV, G, t1, s)`3")
                                      (("1"
                                        (name-replace
                                         "fai"
                                         "inst_step(PV, G, t1, s)`4")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (replace -2 -4 :dir rl)
                                            (("1"
                                              (hide-all-but -4)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1 -2 -3 -4 -5 -6)
                                            (("2"
                                              (expand "inst_step" -9)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "inst_step3_no_effect_cor")
                                                  (("2"
                                                    (use
                                                     "inst_step2_append")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -9)
                                                          (("1"
                                                            (replace
                                                             -10)
                                                            (("1"
                                                              (replace
                                                               -7
                                                               -9
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "member_rhs_append")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -10)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "cdr(P)")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skolem
                                                                               -1
                                                                               "s1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replace
                                                                                   -11)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "s1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          2
                                                                                          3))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "apply_sub"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "apply_sub"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "rhs"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "sec_proj"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "sec_proj"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "apply_sub"
                                                                                 -1)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "s")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-5
                                                                                          2
                                                                                          3))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "member"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "inst_step_fail")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "G"
                                                             "cdr(P)"
                                                             "PV"
                                                             "cons((t1, s), null)"
                                                             "null")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "inst_step4_no_effect_cor"
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -8)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       -10)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "append_null")
                                            (("3"
                                              (expand "apply_sub" -1 2)
                                              (("3"
                                                (reveal
                                                 -1
                                                 -2
                                                 -3
                                                 -4
                                                 -5
                                                 -6)
                                                (("3"
                                                  (expand
                                                   "inst_step"
                                                   -8)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (replace -5)
                                                      (("3"
                                                        (replace -6)
                                                        (("3"
                                                          (replace -4)
                                                          (("3"
                                                            (replace
                                                             -3)
                                                            (("3"
                                                              (rewrite
                                                               "append_null")
                                                              (("3"
                                                                (expand
                                                                 "apply_sub"
                                                                 -8
                                                                 2)
                                                                (("3"
                                                                  (reveal
                                                                   -9)
                                                                  (("3"
                                                                    (rewrite
                                                                     "inst_step2_no_effect_cor")
                                                                    (("3"
                                                                      (rewrite
                                                                       "inst_step_sub_append_cor")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "apply_sub(del, cdr(P))")
                                                                        (("3"
                                                                          (rewrite
                                                                           "apply_sub_len")
                                                                          (("3"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "t")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (skolem
                                                                                       -1
                                                                                       "s1")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "apply_sub_rhs")
                                                                                          (("3"
                                                                                            (skolem
                                                                                             -1
                                                                                             "s2")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (name-replace
                                                                                                 "delta1"
                                                                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                                                                (("3"
                                                                                                  (reveal
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     4
                                                                                                     "s2")
                                                                                                    (("3"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          1
                                                                                                          4))
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -10
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "subs_append2")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (member def-decl "bool" list_props nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (inst_step2_no_effect_cor formula-decl nil inst_step nil)
    (subs_append2 formula-decl nil substitution nil)
    (apply_sub_rhs formula-decl nil unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (inst_step2_append formula-decl nil inst_step nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (member_rhs_append formula-decl nil unification nil)
    (apply_sub const-decl "unif_pair" unification nil)
    (inst_step4_no_effect_cor formula-decl nil inst_step nil)
    (inst_step_fail formula-decl nil inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil))
   shostak))
 (inst_step_vars_supset_dom 0
  (inst_step_vars_supset_dom-1 nil 3882629620
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "supset_dom" 1) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (flatten)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("1"
                                        (inst -2 "cdr(P)")
                                        (("1"
                                          (expand "length" -2 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "append_null")
                                      (("2"
                                        (expand "apply_sub" 2 2)
                                        (("2"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("2"
                                            (rewrite
                                             "supset_dom_append")
                                            (("2"
                                              (expand "subset?" 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   ("member" "union")
                                                   -1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "apply_sub(del, cdr(P))")
                                                      (("1"
                                                        (rewrite
                                                         "apply_sub_len")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "apply_sub_vars")
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "subset?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 ("member"
                                                                                  "union")
                                                                                 -1)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "del"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_img")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subset?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                2
                                                                                                4))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 ("t"
                                                                                                  "s"))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       2)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "del" -1)
                                                      (("2"
                                                        (use
                                                         "inst_step_supset_dom")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "subset?"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    2
                                                                    4))
                                                                  (("2"
                                                                    (expand
                                                                     "vars"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       ("t"
                                                                        "s"))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (supset_dom def-decl "finite_set[variable]" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (supset_dom_append formula-decl nil substitution nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_img formula-decl nil inst_step nil)
    (apply_sub_vars formula-decl nil unification nil)
    (inst_step_supset_dom formula-decl nil inst_step nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (inst_step_vars_img 0
  (inst_step_vars_img-1 nil 3882545005
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skeep)
              (("" (expand "inst_step" -2)
                (("" (lift-if)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (rewrite "img_null")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "t" "car(P)`1")
                        (("1" (name-replace "s" "car(P)`2")
                          (("1"
                            (name-replace "G1"
                             "inst_step(PV, G, t, s)`1")
                            (("1"
                              (name-replace "del"
                               "inst_step(PV, G, t, s)`2")
                              (("1"
                                (name-replace
                                 "skp"
                                 "inst_step(PV, G, t, s)`3")
                                (("1"
                                  (name-replace
                                   "fai"
                                   "inst_step(PV, G, t, s)`4")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (rewrite "img_null")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "subset?" -3)
                                                (("2"
                                                  (inst -3 "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "del2"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal
                                               -1
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7)
                                              (("3"
                                                (use "vars_img_append")
                                                (("3"
                                                  (expand "subset?" -1)
                                                  (("3"
                                                    (inst -1 "x")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         ("member"
                                                          "union")
                                                         -1)
                                                        (("3"
                                                          (case
                                                           "subset?(vars(img(del)), vars(P))")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (inst
                                                                 -11
                                                                 "apply_sub(del, cdr(P))")
                                                                (("1"
                                                                  (rewrite
                                                                   "apply_sub_len")
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -11
                                                                     2)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "subset?"
                                                                         -11)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "apply_sub_vars")
                                                                              (("1"
                                                                                (expand
                                                                                 "subset?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       -1)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subset?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vars"
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             ("member"
                                                                                              "union")
                                                                                             4)
                                                                                            (("2"
                                                                                              (prop)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subset?"
                                                               -2)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -10
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "inst_step_img")
                                                              (("2"
                                                                (replace
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -7
                                                                      -8
                                                                      1
                                                                      4))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (img_null formula-decl nil substitution nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (vars_img_append formula-decl nil substitution nil)
    (inst_step_img formula-decl nil inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (apply_sub_vars formula-decl nil unification nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil))
   shostak))
 (inst_step_idempotent3 0
  (inst_step_idempotent3-1 nil 3882537992
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split)
              (("1" (flatten)
                (("1" (rewrite "idempotent_null") nil nil)) nil)
               ("2" (flatten)
                (("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (rewrite "append_null")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "idempotent_null")
                                  nil
                                  nil)
                                 ("2"
                                  (rewrite "inst_step3_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (rewrite
                                     "inst_step_sub_append_cor")
                                    (("3"
                                      (inst
                                       -1
                                       "apply_sub(del, cdr(P))")
                                      (("3"
                                        (rewrite "apply_sub_len")
                                        (("3"
                                          (expand "length" -1 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (name-replace
                                                 "del2"
                                                 "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                                (("3"
                                                  (reveal -4 -5 -6 -7)
                                                  (("3"
                                                    (lemma
                                                     "idempotent_append")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "del"
                                                       "del2")
                                                      (("3"
                                                        (reveal -2)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "inst_step_idempotent2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "inst_step_vars_img")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4
                                                                     5
                                                                     6)
                                                                    (("2"
                                                                      (lemma
                                                                       "apply_sub_elim_var2")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand
                                                                           "del"
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_idempotent2")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -3
                                                                                  1))
                                                                                (("2"
                                                                                  (expand
                                                                                   "disjoint?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (apply_sub_len formula-decl nil unification nil)
    (idempotent_append formula-decl nil substitution nil)
    (inst_step_idempotent2 formula-decl nil inst_step nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (apply_sub_elim_var2 formula-decl nil unification nil)
    (inst_step_vars_img formula-decl nil inst_step nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append_null formula-decl nil list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (idempotent_null formula-decl nil substitution nil))
   shostak))
 (inst_step_vars_unif 0
  (inst_step_vars_unif-1 nil 3882623320
   ("" (skeep)
    (("" (assert)
      (("" (use "inst_step_idempotent3")
        (("" (assert)
          (("" (expand "disjoint?")
            (("" (expand "empty?" 1)
              (("" (skeep)
                (("" (expand ("member " "intersection") -2)
                  (("" (prop)
                    (("" (rewrite "vars_unif_prb" -2)
                      (("" (skolem -2 "t")
                        (("" (prop)
                          (("" (use "inst_step2_mem")
                            (("" (assert)
                              ((""
                                (assert)
                                ((""
                                  (skolem -1 "t1")
                                  ((""
                                    (prop)
                                    ((""
                                      (name-replace
                                       "delta"
                                       "inst_step(PV, G, P, null, null)`3")
                                      ((""
                                        (reveal -1)
                                        ((""
                                          (replace -3 -6)
                                          ((""
                                            (use
                                             "apply_sub_elim_var_t")
                                            ((""
                                              (assert)
                                              ((""
                                                (use
                                                 "idempotent_disjoint_dom_img")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand
                                                     "disjoint?"
                                                     -1)
                                                    ((""
                                                      (expand
                                                       "empty?"
                                                       -1)
                                                      ((""
                                                        (inst -1 "x")
                                                        ((""
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars_unif_prb formula-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (idempotent_disjoint_dom_img formula-decl nil substitution nil)
    (apply_sub_elim_var_t formula-decl nil substitution nil)
    (inst_step2_mem formula-decl nil inst_step nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_idempotent3 formula-decl nil inst_step nil))
   shostak))
 (inst_step_vars_unif2 0
  (inst_step_vars_unif2-1 nil 3882626030
   ("" (skeep)
    (("" (assert)
      (("" (expand "subset?" 1)
        (("" (skeep)
          (("" (rewrite "vars_unif_prb")
            (("" (skolem -1 "t")
              (("" (prop)
                (("" (use "inst_step2_mem")
                  (("" (assert)
                    (("" (assert)
                      (("" (skolem -1 "s")
                        (("" (prop)
                          (("" (lemma "vars_subs_t")
                            ((""
                              (name-replace "delta"
                               "inst_step(PV, G, P, null, null)`3")
                              ((""
                                (reveal -1)
                                ((""
                                  (inst -2 "delta" "s")
                                  ((""
                                    (expand "subset?" -2)
                                    ((""
                                      (inst -2 "x")
                                      ((""
                                        (assert)
                                        ((""
                                          (expand
                                           ("member" "union")
                                           -2)
                                          ((""
                                            (prop)
                                            (("1"
                                              (use
                                               "inst_step_vars_img")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "vars_unif_prb")
                                              (("2"
                                                (inst 1 "s")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step2_mem formula-decl nil inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (inst_step_vars_img formula-decl nil inst_step nil)
    (vars_subs_t formula-decl nil substitution nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vars_unif_prb formula-decl nil unification nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (inst_step_supset_dom_dom 0
  (inst_step_supset_dom_dom-1 nil 3882633164
   ("" (skeep) (("" (assert) (("" (postpone) nil nil)) nil)) nil) nil
   shostak))
 (inst_step_dom_PV 0
  (inst_step_dom_PV-1 nil 3883224114
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "inst_step3_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -2 "G" "PV")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" 2 2)
                                    (("3"
                                      (rewrite
                                       "inst_step_sub_append_cor"
                                       2)
                                      (("3"
                                        (inst
                                         -1
                                         "apply_sub(del, cdr(P))")
                                        (("3"
                                          (rewrite "apply_sub_len" -1)
                                          (("3"
                                            (expand "length" -1 2)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (expand
                                                   "disjoint?"
                                                   2)
                                                  (("3"
                                                    (expand "empty?" 2)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (expand
                                                         ("member"
                                                          "intersection")
                                                         -1)
                                                        (("3"
                                                          (prop)
                                                          (("3"
                                                            (use
                                                             "dom_append")
                                                            (("3"
                                                              (expand
                                                               "subset?"
                                                               -1)
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     ("member"
                                                                      "union")
                                                                     -1)
                                                                    (("3"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "disjoint?"
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           "empty?"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "x")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "inst_step_dom_PV_aux")
                                                                          (("2"
                                                                            (expand
                                                                             "del"
                                                                             -2)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (disjoint? const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (subs const-decl "term" substitution nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (dom_append formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (append def-decl "list[T]" list_props nil)
    (DS const-decl "list[atom]" atoms nil)
    (ext def-decl "term" term_properties nil)
    (singleton const-decl "(singleton?)" sets nil)
    (inst_step_dom_PV_aux formula-decl nil inst_step nil)
    (subset? const-decl "bool" sets nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil))
   shostak))
 (inst_step_cont 0
  (inst_step_cont-1 nil 3882633343
   ("" (skeep)
    (("" (assert)
      (("" (expand "contained?")
        (("" (prop)
          (("1" (use "inst_step_vars_supset_dom")
            (("1" (assert)
              (("1" (expand "subset?")
                (("1" (skeep)
                  (("1" (inst -1 "x")
                    (("1" (assert)
                      (("1" (use "supset_dom_correct")
                        (("1" (assert)
                          (("1" (expand "dom" -1)
                            (("1" (expand "member" -1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "inst_step_vars_img") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (supset_dom_correct formula-decl nil substitution nil)
    (subset? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (inst_step_vars_supset_dom formula-decl nil inst_step nil)
    (inst_step_vars_img formula-decl nil inst_step nil)
    (contained? const-decl "bool" substitution nil))
   shostak))
 (inst_step_well_formed 0
  (inst_step_well_formed-1 nil 3882719445
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (rewrite "well_formed_null") nil nil)) nil)
               ("2" (name-replace "t" "car(P)`1")
                (("1" (name-replace "s" "car(P)`2")
                  (("1" (name-replace "G1" "inst_step(PV, G, t, s)`1")
                    (("1"
                      (name-replace "del" "inst_step(PV, G, t, s)`2")
                      (("1"
                        (name-replace "skp" "inst_step(PV, G, t, s)`3")
                        (("1"
                          (name-replace "fai"
                           "inst_step(PV, G, t, s)`4")
                          (("1" (reveal -1 -2 -3 -4 -5 -6)
                            (("1" (prop)
                              (("1"
                                (rewrite "well_formed_null")
                                nil
                                nil)
                               ("2"
                                (rewrite "inst_step3_no_effect_cor")
                                (("2"
                                  (inst -8 "cdr(P)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "well_formed_unif_prb"
                                           1)
                                          (("1"
                                            (rewrite
                                             "well_formed_unif_prb"
                                             -7)
                                            (("1"
                                              (hide-all-but (-7 1))
                                              (("1"
                                                (skeep)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "append_null")
                                (("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (case "well_formed?(del)")
                                    (("1"
                                      (rewrite
                                       "inst_step_sub_append_cor")
                                      (("1"
                                        (use "well_formed_append")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (inst
                                               -6
                                               "apply_sub(del, cdr(P))")
                                              (("1"
                                                (rewrite
                                                 "apply_sub_len")
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -6
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "well_formed_apply_sub")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-6
                                                                7
                                                                1))
                                                              (("1"
                                                                (rewrite
                                                                 "well_formed_unif_prb")
                                                                (("1"
                                                                  (rewrite
                                                                   "well_formed_unif_prb")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "t!1")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "del" 1)
                                      (("2"
                                        (use
                                         "inst_step_well_formed_aux")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2 3 4 5 6 7 -5)
                                            (("2"
                                              (rewrite
                                               "well_formed_unif_prb")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -5 "t")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -5 "s")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed? const-decl "bool" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (append_null formula-decl nil list_props nil)
    (well_formed_append formula-decl nil substitution nil)
    (apply_sub_len formula-decl nil unification nil)
    (well_formed_apply_sub formula-decl nil unification nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (inst_step_well_formed_aux formula-decl nil inst_step nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (well_formed_unif_prb formula-decl nil unification nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subs const-decl "term" substitution nil)
    (singleton const-decl "(singleton?)" sets nil)
    (ext def-decl "term" term_properties nil)
    (DS const-decl "list[atom]" atoms nil)
    (subterms const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     unification nil)
    (union const-decl "set" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_formed_null formula-decl nil substitution nil))
   shostak))
 (inst_step_well_formed2 0
  (inst_step_well_formed2-1 nil 3882858502
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (split)
              (("1" (flatten)
                (("1" (rewrite "well_formed_unif_prb")
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (name-replace "t" "car(P)`1")
                  (("1" (name-replace "s" "car(P)`2")
                    (("1"
                      (name-replace "G1" "inst_step(PV, G, t, s)`1")
                      (("1"
                        (name-replace "del" "inst_step(PV, G, t, s)`2")
                        (("1"
                          (name-replace "skp"
                           "inst_step(PV, G, t, s)`3")
                          (("1"
                            (name-replace "fai"
                             "inst_step(PV, G, t, s)`4")
                            (("1" (prop)
                              (("1"
                                (rewrite "well_formed_unif_prb")
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "inst_step2_append")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite
                                         "well_formed_unif_prb_append")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -2 "cdr(P)")
                                              (("1"
                                                (expand "length" -2 2)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 3 4))
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (rewrite
                                                           "well_formed_unif_prb")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "t!1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2)
                                              (("2"
                                                (use
                                                 "well_formed_apply_sub")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (rewrite
                                                       "well_formed_unif_prb")
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "t1")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   ("t"
                                                                    "s"))
                                                                  (("1"
                                                                    (expand
                                                                     "member"
                                                                     4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "inst_step_well_formed")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 1 5))
                                                          (("2"
                                                            (rewrite
                                                             "well_formed_unif_prb")
                                                            (("2"
                                                              (rewrite
                                                               "well_formed_unif_prb")
                                                              (("2"
                                                                (skolem
                                                                 1
                                                                 "t1")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "inst_step4_no_effect_cor")
                                      (("2"
                                        (inst
                                         -1
                                         "G"
                                         "cdr(P)"
                                         "cons((t, s), null)"
                                         "PV"
                                         "null")
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (use "inst_step_fail")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "append_null")
                                (("3"
                                  (expand "apply_sub" 2 2)
                                  (("3"
                                    (rewrite
                                     "inst_step2_no_effect_cor")
                                    (("3"
                                      (inst
                                       -1
                                       "apply_sub(del, cdr(P))")
                                      (("3"
                                        (rewrite "apply_sub_len")
                                        (("3"
                                          (expand "length" -1 2)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (use
                                                   "well_formed_apply_sub")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "well_formed_unif_prb")
                                                        (("1"
                                                          (rewrite
                                                           "well_formed_unif_prb"
                                                           -1)
                                                          (("1"
                                                            (skolem
                                                             1
                                                             "t1")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "del"
                                                         1)
                                                        (("2"
                                                          (use
                                                           "inst_step_well_formed_aux")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               2
                                                               4
                                                               7)
                                                              (("2"
                                                                (rewrite
                                                                 "well_formed_unif_prb")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "t")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -1
                                                                     "s")
                                                                    (("2"
                                                                      (expand
                                                                       "s")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_unif_prb formula-decl nil unification nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (union const-decl "set" sets nil)
    (subterms const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     unification nil)
    (inst_step4_no_effect_cor formula-decl nil inst_step nil)
    (inst_step_fail formula-decl nil inst_step nil)
    (inst_step_well_formed formula-decl nil inst_step nil)
    (well_formed_apply_sub formula-decl nil unification nil)
    (well_formed_unif_prb_append formula-decl nil unification nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (inst_step2_append formula-decl nil inst_step nil)
    (inst_step_well_formed_aux formula-decl nil inst_step nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step2_no_effect_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (unif_prb type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (inst_step_vars_context 0
  (inst_step_vars_context-1 nil 3882710049
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (name-replace "t" "car(P)`1")
                    (("1" (name-replace "s" "car(P)`2")
                      (("1"
                        (name-replace "G1" "inst_step(PV, G, t, s)`1")
                        (("1"
                          (name-replace "del"
                           "inst_step(PV, G, t, s)`2")
                          (("1"
                            (name-replace "skp"
                             "inst_step(PV, G, t, s)`3")
                            (("1"
                              (name-replace "fai"
                               "inst_step(PV, G, t, s)`4")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "inst_step1_no_effect_cor")
                                  (("2"
                                    (inst -2 "cdr(P)")
                                    (("2"
                                      (expand "length" -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (skeep)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "append_null")
                                  (("3"
                                    (expand "apply_sub" 2 2)
                                    (("3"
                                      (reveal -1 -2 -3 -4 -5 -6)
                                      (("3"
                                        (rewrite
                                         "inst_step1_no_effect_cor2")
                                        (("3"
                                          (inst
                                           -7
                                           "apply_sub(del, cdr(P))")
                                          (("3"
                                            (rewrite
                                             "apply_sub_len"
                                             -7)
                                            (("3"
                                              (expand "length" -7 2)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "subset?")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst -8 "x")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (use
                                                             "inst_step_vars_context_aux")
                                                            (("3"
                                                              (replace
                                                               -5)
                                                              (("3"
                                                                (expand
                                                                 ("member"
                                                                  "union")
                                                                 2)
                                                                (("3"
                                                                  (prop)
                                                                  (("3"
                                                                    (expand
                                                                     "subset?"
                                                                     -1)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("3"
                                                                        (expand
                                                                         ("member"
                                                                          "union")
                                                                         -7)
                                                                        (("3"
                                                                          (split
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               ("member"
                                                                                "union")
                                                                               -2)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -5
                                                                                  -6
                                                                                  3))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "apply_sub_vars")
                                                                            (("2"
                                                                              (expand
                                                                               "subset?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("member"
                                                                                      "union")
                                                                                     -1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (use
                                                                                           "inst_step_img")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subset?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -6
                                                                                                    -7
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            3
                                                                                            5))
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (union const-decl "set" sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step1_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (inst_step1_no_effect_cor2 formula-decl nil inst_step nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_vars_context_aux formula-decl nil inst_step nil)
    (apply_sub_vars formula-decl nil unification nil)
    (inst_step_img formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil))
   shostak))
 (inst_step_match_var 0
  (inst_step_match_var-1 nil 3883132917
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -5))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "fai" -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -3 "Y")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4 4 5 6)
                                                    (("2"
                                                      (expand
                                                       "match_condition?")
                                                      (("2"
                                                        (skolem 1 "X")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "X")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   ("up"
                                                                    "i"))
                                                                  (("1"
                                                                    (case
                                                                     "i = 0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -6)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "skp"
                                                                                   -7)
                                                                                  (("1"
                                                                                    (reveal
                                                                                     -11
                                                                                     -12)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_skip")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       3
                                                                       "up"
                                                                       "i-1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -5
                                                                                         "j+1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "rhs")
                                                                    (("2"
                                                                      (expand
                                                                       "sec_proj"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "vars"
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "rhs" -4)
                                                    (("3"
                                                      (expand "rhs" 1)
                                                      (("3"
                                                        (expand
                                                         "sec_proj"
                                                         -4)
                                                        (("3"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -4)
                                                          (("3"
                                                            (prop)
                                                            (("3"
                                                              (expand
                                                               "match_condition?"
                                                               -4)
                                                              (("3"
                                                                (inst
                                                                 -4
                                                                 "Y")
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (case
                                                                       "i = 0")
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "skp"
                                                                               -8)
                                                                              (("1"
                                                                                (use
                                                                                 "inst_step_skip")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       ("t"
                                                                                        "s"))
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (split
                                                                                             -6)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -5
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -5)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3)
                                                                              (("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inst_step_match_aux 0
  (inst_step_match_aux-1 nil 3883325157
   ("" (measure-induct "length(P)" "P")
    (("" (skolem 1 "P")
      (("" (prop)
        (("" (skeep)
          ((""
            (name-replace "delta" "inst_step(PV, G, P, null, null)`3")
            (("" (reveal -1)
              (("" (expand "inst_step" -1)
                (("" (lift-if)
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (hide-all-but (-1 -5))
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (name-replace "t" "car(P)`1")
                      (("1" (name-replace "s" "car(P)`2")
                        (("1"
                          (name-replace "G1"
                           "inst_step(PV, G, t, s)`1")
                          (("1"
                            (name-replace "del"
                             "inst_step(PV, G, t, s)`2")
                            (("1"
                              (name-replace "skp"
                               "inst_step(PV, G, t, s)`3")
                              (("1"
                                (name-replace
                                 "fai"
                                 "inst_step(PV, G, t, s)`4")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "fai" -1)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (reveal -2 -3 -4 -5 -6 -7)
                                          (("1"
                                            (expand "inst_step" 3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "inst_step3_no_effect_cor")
                                      (("2"
                                        (inst -3 "cdr(P)")
                                        (("2"
                                          (expand "length" -3 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst -3 "Y")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4 4 5 6)
                                                    (("2"
                                                      (lemma
                                                       "inst_step_match_condition_cdr")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "G"
                                                         "cdr(P)"
                                                         "PV"
                                                         "car(P)`2 "
                                                         "car(P)`1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "skp"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               ("t"
                                                                "s"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "P = cons((car(P)`1, car(P)`2), cdr(P))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      5))
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "rhs" -4)
                                                    (("3"
                                                      (expand "rhs" 1)
                                                      (("3"
                                                        (expand
                                                         "sec_proj"
                                                         -4)
                                                        (("3"
                                                          (expand
                                                           ("member"
                                                            "union")
                                                           -4)
                                                          (("3"
                                                            (expand
                                                             "vars"
                                                             -4)
                                                            (("3"
                                                              (expand
                                                               "union"
                                                               -4)
                                                              (("3"
                                                                (prop)
                                                                (("3"
                                                                  (expand
                                                                   "match_condition2?")
                                                                  (("3"
                                                                    (inst
                                                                     -4
                                                                     "Y")
                                                                    (("3"
                                                                      (prop)
                                                                      (("1"
                                                                        (skolem
                                                                         -1
                                                                         ("up"
                                                                          "i"))
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i = 0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "skp"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (use
                                                                                       "inst_step_skip")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             ("t "
                                                                                              "s"))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member"
                                                                                               -5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -6)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -5
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        2))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "rhs"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sec_proj"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "vars"
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (reveal
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     -9)
                                                    (("4"
                                                      (expand
                                                       "inst_step"
                                                       4)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (rewrite
                                                           "inst_step4_no_effect_cor"
                                                           5)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "append_null")
                                      (("3"
                                        (expand "apply_sub" -1 2)
                                        (("3"
                                          (rewrite
                                           "inst_step_sub_append_cor")
                                          (("3"
                                            (name-replace
                                             "delta1"
                                             "inst_step(PV, G1, apply_sub(del, cdr(P)), null, null)`3")
                                            (("3"
                                              (reveal -1)
                                              (("3"
                                                (case
                                                 "member(Y, dom(del))")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (reveal -5)
                                                    (("1"
                                                      (expand
                                                       "match_condition2?")
                                                      (("1"
                                                        (inst -5 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -5
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (use
                                                                         "inst_step_inst_ptc_vars_img2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -6
                                                                                 6
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "subs"
                                                                                   6)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subs_append2")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_no_effect_t")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "delta1"
                                                                                         "subs(del)(null * Y)")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -5
                                                                                                6))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vars_finset")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "subs(del)(null * Y)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               ("member"
                                                                                                                "img")
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "Y")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subs"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -5
                                                                                              1))
                                                                                            (("2"
                                                                                              (use
                                                                                               "inst_step_dom_PV")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "disjoint?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ("member"
                                                                                                              "intersection"))
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subset?"
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "vars_finset")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         2
                                                                                                                         "subs(del)(null *Y)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             ("member"
                                                                                                                              "img")
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               2
                                                                                                                               "Y")
                                                                                                                              (("2"
                                                                                                                                (reveal
                                                                                                                                 -5)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subs"
                                                                                                                                     2
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-9
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 ("t"
                                                                                  "s"))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "inst_ptc?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -9
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       5)
                                                                      (("2"
                                                                        (case
                                                                         "subset?(dom(del), vars(t, s))")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -3
                                                                            5))
                                                                          (("1"
                                                                            (expand
                                                                             "subset?")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("t"
                                                                                    "s"))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (use
                                                                             "inst_step_dom")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "member(Y, vars(img(del)))")
                                                  (("1"
                                                    (hide -4 2 3 6 7)
                                                    (("1"
                                                      (expand
                                                       "match_condition2?")
                                                      (("1"
                                                        (inst -4 "Y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skolem
                                                             -4
                                                             ("up"
                                                              "i"))
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (reveal
                                                                         -6)
                                                                        (("1"
                                                                          (use
                                                                           "inst_step_inst_ptc_vars_img2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -4
                                                                                    3))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-9
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t"
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -8
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "del"
                                                                         -1)
                                                                        (("2"
                                                                          (use
                                                                           "inst_step_img")
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "Y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    4))
                                                                                  (("2"
                                                                                    (expand
                                                                                     ("t "
                                                                                      "s"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -3
                                                     "apply_sub(del, cdr(P))")
                                                    (("2"
                                                      (rewrite
                                                       "apply_sub_len")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "G1"
                                                             "PV"
                                                             "Y")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "subs"
                                                                     8)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       8
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "subs_append2")
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_no_effect_t")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "del"
                                                                             "null*Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  3))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -6)
                                                                (("2"
                                                                  (lemma
                                                                   "inst_step_match_condition_apply_sub")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "cdr(P)"
                                                                     "PV"
                                                                     "s"
                                                                     "t")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         ("skp"
                                                                          "fai"))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "P = cons((t, s), cdr(P))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                8))
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "t"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "s"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "rhs"
                                                                 -4)
                                                                (("3"
                                                                  (expand
                                                                   "sec_proj"
                                                                   -4)
                                                                  (("3"
                                                                    (expand
                                                                     "vars"
                                                                     -4)
                                                                    (("3"
                                                                      (expand
                                                                       ("member"
                                                                        "union")
                                                                       -4)
                                                                      (("3"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "match_condition2?"
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "Y")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (skolem
                                                                                 -1
                                                                                 ("up"
                                                                                  "i"))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (case
                                                                                     "i = 0")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "inst_ptc?"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-5
                                                                                                        7))
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "inst_step_inst_ptc_dom")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ("fai"
                                                                                                            "t"
                                                                                                            "s"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ("t"
                                                                                                                "s"))
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "inst_ptc?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -5
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-5
                                                                                              2))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "rhs"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "sec_proj")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vars"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       ("member"
                                                                                        "union")
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "vars_args")
                                                                          (("2"
                                                                            (rewrite
                                                                             "vars_args")
                                                                            (("2"
                                                                              (skolem
                                                                               -1
                                                                               "t1")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "subs(del)(t1)")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "apply_sub_rhs")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rhs"
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "apply_sub_not_elim_var_t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (reveal
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("4"
                                                                  (expand
                                                                   ("skp"
                                                                    "fai"))
                                                                  (("4"
                                                                    (expand
                                                                     "inst_step"
                                                                     7)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (replace
                                                                         -3)
                                                                        (("4"
                                                                          (replace
                                                                           -3)
                                                                          (("4"
                                                                            (replace
                                                                             -4)
                                                                            (("4"
                                                                              (replace
                                                                               -2)
                                                                              (("4"
                                                                                (replace
                                                                                 -1)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "append_null")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "apply_sub"
                                                                                     7
                                                                                     2)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       "inst_step4_no_effect2_cor"
                                                                                       7)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (fresh_context type-eq-decl nil freshness nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (match_condition2? const-decl "bool" aux_unification nil)
    (member const-decl "bool" sets nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (subs const-decl "term" substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (inst_step4_no_effect_cor formula-decl nil inst_step nil)
    (member const-decl "bool" unification nil)
    (inst_step_skip formula-decl nil inst_step nil)
    (nth def-decl "T" list_props nil)
    (vars const-decl "finite_set[variable]" unification nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (inst_step_match_condition_cdr formula-decl nil inst_step nil)
    (inst_step3_no_effect_cor formula-decl nil inst_step nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (inst_step_inst_ptc_vars_img2 formula-decl nil inst_step nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_append2 formula-decl nil substitution nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (inst_step_dom_PV formula-decl nil inst_step nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars_finset formula-decl nil term_properties nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (inst_ptc? const-decl "bool" aux_unification nil)
    (inst_step_dom formula-decl nil inst_step nil)
    (inst_step4_no_effect2_cor formula-decl nil inst_step nil)
    (inst_step_inst_ptc_dom formula-decl nil inst_step nil)
    (apply_sub_rhs formula-decl nil unification nil)
    (apply_sub_not_elim_var_t formula-decl nil substitution nil)
    (vars_args formula-decl nil term_properties nil)
    (inst_step_match_condition_apply_sub formula-decl nil inst_step
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (apply_sub_len formula-decl nil unification nil)
    (inst_step_img formula-decl nil inst_step nil)
    (inst_step_sub_append_cor formula-decl nil inst_step nil)
    (append_null formula-decl nil list_props nil)
    (inst_step const-decl "[fresh_context, sub, bool, bool]" inst_step
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (inst_step_match 0
  (inst_step_match-1 nil 3883063154
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (hide 1)
          (("" (expand "match_problem?" 1)
            (("" (skeep)
              ((""
                (name-replace "P1" "inst_step(PV, G, P, null, null)`2")
                (("" (reveal -1)
                  (("" (rewrite "vars_args" -3)
                    (("" (skolem -3 "s")
                      (("" (prop)
                        ((""
                          (name-replace "delta"
                           "inst_step(PV, G, P, null, null)`3")
                          ((""
                            (case "EXISTS t: member(t, rhs(P)) AND s = subs(delta)(t)")
                            (("1" (skeep)
                              (("1"
                                (replace -2 -7)
                                (("1"
                                  (lemma "vars_subs_t2")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "NOT member(Y, PV)")
                                          (("1"
                                            (case
                                             "subset?(vars(subs(delta)(Y)), PV)")
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst -1 "X")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "inst_step_match_aux")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst -1 "Y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (reveal 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "vars_args"
                                                             2)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "t")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "inst_step_dom_PV")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -7)
                                                (("2"
                                                  (expand
                                                   "disjoint?"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "Y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dom"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "inst_step2_mem_rhs")
                              (("2"
                                (inst?)
                                (("2"
                                  (inst -1 "s")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 "s1")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst 1 "s1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((match_problem? const-decl "bool" unification nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rhs const-decl "args" unification nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vars_args formula-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (subs def-decl "term" substitution nil)
    (inst_step_dom_PV formula-decl nil inst_step nil)
    (empty? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (subs const-decl "term" substitution nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (inst_step_match_aux formula-decl nil inst_step nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars_subs_t2 formula-decl nil substitution nil)
    (inst_step2_mem_rhs formula-decl nil inst_step nil))
   shostak))
 (inst_step_mem 0
  (inst_step_mem-1 nil 3882537521
   ("" (measure-induct "length(lst_P)" "lst_P")
    (("" (skolem 1 "lst_P")
      (("" (prop)
        (("" (skeep)
          (("" (expand "inst_step" -2)
            (("" (lift-if)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (expand "member" -2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (inst -3 "cdr(lst_P)")
                        (("1" (expand "length" -3 2)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 3 "P1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "member" 3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (inst 3 "car(lst_P)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(lst_P)")
                            (("2" (expand "length" -2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 4 "P1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 4)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inst_step def-decl "[fresh_context, unif_prb, sub, bool]"
     inst_step nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inst_step def-decl "list[[fresh_context, unif_prb, sub]]"
     inst_step nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (fresh_context type-eq-decl nil freshness nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

