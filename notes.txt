# name-replace
# Lista MÃ¡gica
inst_step2_mem_rhs
inst_step_match_var

## solve_ac
(name-replace "args" "elim_com_arg(G, s, t, f)`1")
(name-replace "ms" "elim_com_arg(G, s, t, f)`2")
(name-replace "mt" "elim_com_arg(G, s, t, f)`3")
(name-replace "b" "calculate_upper_bound(ms, mt)")
(name-replace "D" "dio_solver(ms, mt, b)")
(name-replace "D_lst" "extract_submatrices(D, args, PV)")

## elim_com_arg
(name-replace "p_args_s" "remove_common(get_args(f)(s), get_args(f)(t), equal?(G))")
(name-replace "args_s" "count_elem(null, null, p_args_s, equal?(G))`1")
(name-replace "p_args_t" "remove_common(get_args(f)(t), get_args(f)(s), equal?(G))")
(name-replace "args_t" "count_elem(null, null, p_args_t, equal?(G))`1")

## get_pre_new_args
(name-replace "Z1" "get_new_var(lst_V)")
(name-replace "lst_args1" "add_new_arg(lst_args, car(D), null * Z1)")

## apply_ac
(name-replace "G" "input`1")
(name-replace "Pu" "input1_`2")
(name-replace "Ps" "input1_`3")
(name-replace "sig" "input1_`4")
(name-replace "V" "input1_`5")
(name-replace "PV" "input1_`6")
(name-replace "t" "car(Pu)`1")
(name-replace "s" "car(Pu)`2")
(name-replace "lst_V" "finset2list[variable](V)")
(name-replace "ac_results"  "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
(name-replace "new_V"  "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
(name-replace "ac_results_subs" "inst_step(PV, G, ac_results)")

# inst_step 
(name-replace "t" "car(P)`1") 
(name-replace "s" "car(P)`2") 
(name-replace "G1" "inst_step(PV, G, t, s)`1")
(name-replace "del" "inst_step(PV, G, t, s)`2")
(name-replace "skp" "inst_step(PV, G, t, s)`3")
(name-replace "fai" "inst_step(PV, G, t, s)`4")

## substitution.pvs
-> some lemmas that depend on "equal?(t, s) => equal?(sigma t, sigma s)" were not proved. 
