% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%
%%%%%%%%%%%%%%%%%%%%%%%

apply_ac: THEORY
BEGIN
	IMPORTING aux_unification, inst_step


% after we call "apply_ac_step" we obtain, together with the unification problem, a substitution computed
% in the instantiation step and a set of variables to avoid. So, we define the type "ac_sol_simp"  
ac_sol_simp: TYPE = [unif_prb, sub, finite_set[variable]]

        IMPORTING list_theory[ac_sol_simp],
	          map_theory[[unif_prb, unif_prb, sub, finite_set[variable]], ac_sol_simp],
		  list_theory[basic_sub]

i: VAR nat

f: VAR string

X: VAR variable

t, s: VAR term 

G, G1, Delta: VAR fresh_context

new_vars2avoid, vars2avoid, vars2avoid1, V, V1, PV: VAR finite_set[variable]

lst_vars2avoid, lst_V: VAR list[variable]

sigma, sigma1, delta, gamma: VAR sub

P, P1, P2, Pu, Ps, unseen_unif_prb, seen_unif_prb, unif_prb, unif_prb1, unif_prb2: VAR unif_prb

ac_results_subs: VAR list[[fresh_context, unif_prb, sub]]

ac_sol, ac_sol1, ac_sol2: VAR ac_sol_simp

nice_input?(G, P, sigma, V, PV): bool =
   idempotent?(sigma) AND disjoint?(vars(P), dom(sigma)) AND 
   contained?(sigma, V) AND subset?(vars(P), V) AND
   subset?(vars(G), V) AND subset?(PV, V) AND
   well_formed?(P) AND well_formed?(sigma) AND match_problem?(P, PV)

nice_input?(G, P1, P2, sigma, V, PV): bool = nice_input?(G, append(P1, P2), sigma, V, PV)

apply_ac_input: TYPE = {input: [fresh_context, unif_prb, unif_prb, sub, finite_set[variable],
                            finite_set[variable]] | nice_input?(input)}

% the input in the definition of "nice_input" makes reference to the input of the algorithm
% "unify" and not the input of the function "apply_ac"
nice_input: TYPE = {input: [fresh_context, unif_prb, sub, finite_set[variable],
                            finite_set[variable]] | nice_input?(input)}

% we use variables with the suffix "_" if we don't have a guarantee that they are nice
input_, input1_, input2_: VAR [fresh_context, unif_prb, unif_prb, sub, finite_set[variable],
                            finite_set[variable]]


input, input1, input2: VAR apply_ac_input 
output: VAR nice_input

IMPORTING list_theory[nice_input]

% this function is called by "apply_ac". It returns a list of inputs and we will
% call "apply_ac" in each one of the inputs returned. 
input_apply_ac(ac_results_subs, G, Pu, Ps, sigma, V, PV): RECURSIVE
   list[[fresh_context, unif_prb, unif_prb, sub, finite_set[variable],
                            finite_set[variable]]] = 
   IF null?(ac_results_subs) THEN null
   ELSE LET 
       (G1, P1, sigma1) = car(ac_results_subs), 
       new_Pu = apply_sub(sigma1, Pu), 
       new_Ps = append(P1, apply_sub(sigma1, Ps)), 
       new_sigma = append(sigma1, sigma), 
       input = (G1, new_Pu, new_Ps, new_sigma, V, PV) IN 
       cons(input, input_apply_ac(cdr(ac_results_subs), G, Pu, Ps, sigma, V, PV))
   ENDIF 
MEASURE ac_results_subs BY << 

%%%
input_apply_ac_mem: LEMMA 
    member(input_, input_apply_ac(ac_results_subs, G, Pu, Ps, sigma, V, PV)) IFF 
    EXISTS G1, P1, sigma1: 
        member((G1, P1, sigma1), ac_results_subs) AND 
	input_`1 = G1 AND input_`2 = apply_sub(sigma1, Pu) AND input_`3 = append(P1, apply_sub(sigma1, Ps))
	AND input_`4 = append(sigma1, sigma) AND input_`5 = V AND input_`6 = PV

    
% returns True if from input1 we may get input2 by an application of "apply_ac"
next_input?(input1_, input2_): bool =
  LET (G, Pu, Ps, sigma, V, PV) = input1_ IN 
  IF NOT null?(Pu) AND all_ac_prb?(Pu) AND equal?(G)(car(Pu)`1, car(Pu)`2) THEN
     input2_ = (G, cdr(Pu), Ps, sigma, V, PV)
  ELSE NOT null?(Pu) AND all_ac_prb?(Pu) AND
  LET 
       (t, s) = car(Pu), 
       lst_V = finset2list[variable](V),
       ac_results = first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)),
       new_V = vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))),
       ac_results_subs = inst_step(PV, G, ac_results) IN 
       member(input2_, input_apply_ac(ac_results_subs, G, cdr(Pu), Ps, sigma, new_V, PV))
  ENDIF

next_input_nice_input: LEMMA    
   next_input?(input1_, input2_) AND nice_input?(input1_) IMPLIES 
   nice_input?(input2_)

% initially, this function is called with (G, P, null, sigma, V, PV)
% recursively apply "solve_ac" to every unification pair in "Pu" and instantiates the
% variables that it can by calling "instantiate_step". 
% storing the results in the variables G, Ps, sigma, V
apply_ac(input): RECURSIVE list[nice_input] = 
   LET (G, Pu, Ps, sigma, V, PV) = input IN 
   IF NOT all_ac_prb?(Pu) THEN null
   ELSIF null?(Pu) THEN cons((G, Ps, sigma, V, PV), null)
   ELSE LET
     (t, s) = car(Pu) IN 
     IF equal?(G)(t, s) THEN apply_ac(G, cdr(Pu), Ps, sigma, V, PV)
     ELSE LET
	lst_V = finset2list[variable](V),
	ac_results = first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)),
	new_V = vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))),
	ac_results_subs = inst_step(PV, G, ac_results) IN 
	IF null?(ac_results_subs) THEN null
	ELSE LET
	    input_lst = input_apply_ac(ac_results_subs, G, cdr(Pu), Ps, sigma, new_V, PV) IN
	    flatten(map(apply_ac)(input_lst))
	ENDIF
     ENDIF
   ENDIF
MEASURE input`2 BY << 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% - Lemmas
% input_apply_ac_step
%input_apply_ac_step_mem: LEMMA
%    member(input, input_apply_ac_step(ac_results_subs, unseen_unif_prb,
%                                      seen_unif_prb, sigma, vars2avoid)) IMPLIES
%    EXISTS unif_prb1, delta:
%        member((unif_prb1, delta), ac_results_subs) AND
%	input`1 = apply_sub(delta, unseen_unif_prb) AND
%	input`2 = append(unif_prb1, apply_sub(delta, seen_unif_prb)) AND
%	input`3 = append(delta, sigma) AND 
%	input`4 = vars2avoid

%input_apply_ac_step_mem2: LEMMA 
%    (EXISTS unif_prb1, delta:
%        member((unif_prb1, delta), ac_results_subs) AND
%	input`1 = apply_sub(delta, unseen_unif_prb) AND
%	input`2 = append(unif_prb1, apply_sub(delta, seen_unif_prb)) AND
%	input`3 = append(delta, sigma) AND 
%	input`4 = vars2avoid)
%    IMPLIES
%    member(input, input_apply_ac_step(ac_results_subs, unseen_unif_prb,
%                                      seen_unif_prb, sigma, vars2avoid)) 
%
%input_apply_ac_step_sigma_null: LEMMA
%    member(input, input_apply_ac_step(ac_results_subs, unseen_unif_prb,
%                                      seen_unif_prb, sigma, vars2avoid)) IFF
%    EXISTS input2:
%      member(input2, input_apply_ac_step(ac_results_subs, unseen_unif_prb,
%                                      seen_unif_prb, null, vars2avoid))
%      AND input`1 = input2`1 AND input`2 = input2`2 AND
%          input`3 = append(input2`3, sigma) AND input`4 = input2`4
%
%
% nice_input / next input
%nice_input_apply_sub: LEMMA 
%   LET sigma1 = cons((X, s), null) IN 
%   nice_input?(unif_prb, sigma, vars2avoid) AND member(variable(X), unif_prb) AND member(s, unif_prb) AND
%   NOT member(X, vars(s)) AND (FORALL t: member(t, unif_prb1) IMPLIES member(t, unif_prb)) IMPLIES
%   nice_input?(apply_sub(sigma1, unif_prb1), append(sigma1, sigma), vars2avoid)
%
%   
%nice_input_subterms: LEMMA  
%   nice_input?(unif_prb, sigma, vars2avoid) AND
%   subset?(subterms(unif_prb1), subterms(unif_prb)) AND no_pair?(unif_prb1) IMPLIES
%   nice_input?(unif_prb1, sigma, vars2avoid)
%
%nice_input_cdr: LEMMA    
%   NOT null?(unif_prb) AND nice_input?(unif_prb, sigma, vars2avoid) 
%   IMPLIES nice_input?(cdr(unif_prb), sigma, vars2avoid)
%
%nice_input_vars: LEMMA  
%   nice_input?(unif_prb, sigma, vars2avoid) AND subset?(vars2avoid, vars2avoid1) IMPLIES
%   nice_input?(unif_prb, sigma, vars2avoid1)
%
%next_input_nice_input: LEMMA    
%   next_input?(input1, input2) AND nice_input?(append(input1`1, input1`2), input1`3, input1`4) IMPLIES 
%   nice_input?(append(input2`1, input2`2), input2`3, input2`4)
%
%nice_input_apply_ac_step: LEMMA   
%   member(apply_ac_output, apply_ac_step(unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND nice_input?(append(unif_prb, seen_unif_prb), sigma, vars2avoid) IMPLIES 
%   nice_input?(apply_ac_output`1, apply_ac_output`2, apply_ac_output`3)
%
%nice_input_decompose: LEMMA    
%   nice_input?(unif_prb, sigma, vars2avoid) AND 
%   app?(t) AND app?(s) AND member(t, unif_prb) AND member(s, unif_prb) IMPLIES 
%   nice_input?(decompose(arg(t), arg(s))`1, sigma, vars2avoid)
%
%nice_input_append: LEMMA  
%   nice_input?(append(unif_prb, unif_prb1), sigma, vars2avoid) IFF
%   (nice_input?(unif_prb, sigma, vars2avoid) AND nice_input?(unif_prb1, sigma, vars2avoid))
%
%nice_input_choose: LEMMA 
%   nice_input?(unif_prb, sigma, vars2avoid) IMPLIES
%   nice_input?(choose_unif_pair(unif_prb)`2, sigma, vars2avoid)
%
%nice_input_solve_ac: LEMMA  
%   LET V1 = vars(sec_proj(solve_ac(t, s, lst_V, f))) IN 
%   nice_input?(unif_prb, sigma, vars2avoid) AND member(t, unif_prb) AND member(s, unif_prb)
%   AND list2set(lst_V) = vars2avoid AND member(unif_prb1, first_proj(solve_ac(t, s, lst_V, f)))
%   IMPLIEs nice_input?(unif_prb1, sigma, V1) 
%
%nice_input_apply_sub_inst_step: LEMMA  
%   LET sigma1 = instantiate_step(unif_prb1, null, null)`2 IN
%   nice_input?(unif_prb, sigma, vars2avoid) AND 
%   subset?(unif_prb1, unif_prb) AND subset?(unif_prb2, unif_prb) IMPLIES 
%   nice_input?(apply_sub(sigma1, unif_prb2), append(sigma1, sigma), vars2avoid)
%
%% apply_ac_step
%apply_ac_step_sigma_null: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   IFF EXISTS ac_sol1:
%      member(ac_sol1, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid)) AND
%      ac_sol`1 = ac_sol1`1 AND ac_sol`2 = append(ac_sol1`2, sigma) AND ac_sol`3 = ac_sol1`3 
%
%apply_ac_step_sub: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid))
%   AND NOT member(X, vars(unseen_unif_prb)) AND member(X, vars2avoid) IMPLIES 
%   NOT member(variable(X), sec_proj(ac_sol`2))
%
%apply_ac_step_vars: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid))
%   AND NOT member(X, vars(append(unseen_unif_prb, seen_unif_prb))) AND member(X, vars2avoid)
%   IMPLIES NOT member(X, vars(ac_sol`1))
%
%apply_ac_step_sub_vars_img: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid))
%   AND NOT member(X, vars(unseen_unif_prb)) AND member(X, vars2avoid)
%   IMPLIES NOT member(X, vars(img(ac_sol`2)))
%   
%apply_ac_step_sub_idempotent: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid))
%   IMPLIES idempotent?(ac_sol`2)
%
%apply_ac_step_well_formed: LEMMA 
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND well_formed?(sigma) AND well_formed?(unseen_unif_prb) IMPLIES well_formed?(ac_sol`2)
%
%apply_ac_step_sub_dom: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, null, vars2avoid))
%   AND NOT member(X, vars(unseen_unif_prb)) AND member(X, vars2avoid)
%   IMPLIES NOT member(X, dom(ac_sol`2))
%
%apply_ac_step_sub_decompose: LEMMA 
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   IMPLIES EXISTS delta: 
%      ac_sol`2 = append(delta, sigma)
%
%apply_ac_step_vars2avoid: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND subset?(vars(append(unseen_unif_prb, seen_unif_prb)), vars2avoid) AND
%   subset?(dom(sigma), vars2avoid)  
%   IMPLIES subset?(vars2avoid, ac_sol`3) AND subset?(dom(ac_sol`2), ac_sol`3)
%   AND subset?(vars(ac_sol`1), ac_sol`3)
%
%apply_ac_step_vars2avoid_cor: LEMMA 
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND nice_input?(append(unseen_unif_prb, seen_unif_prb), sigma, vars2avoid) 
%   IMPLIES subset?(vars2avoid, ac_sol`3) 
%
%apply_ac_step_disjoint_vars: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND disjoint?(vars(append(unseen_unif_prb, seen_unif_prb)), dom(sigma)) AND
%   subset?(dom(sigma), vars2avoid) IMPLIES disjoint?(vars(ac_sol`1), dom(ac_sol`2))
%
%apply_ac_step_unifies_seen: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND unifies?(delta, ac_sol`1) AND (EXISTS sigma1: delta = append(sigma1, ac_sol`2))
%   AND subset?(dom(sigma), vars2avoid) AND
%   disjoint?(dom(sigma), union(vars(seen_unif_prb), vars(unseen_unif_prb)))
%   IMPLIES unifies?(delta, seen_unif_prb) 
%   
%% soundness of apply_ac_step
%apply_ac_step_sound: LEMMA
%   member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid))
%   AND unifies?(delta, ac_sol`1) AND (EXISTS sigma1: delta = append(sigma1, ac_sol`2))
%   AND subset?(dom(sigma), vars2avoid) AND 
%   disjoint?(dom(sigma), union(vars(seen_unif_prb), vars(unseen_unif_prb)))
%   IMPLIES unifies?(delta, unseen_unif_prb)
%
%%% completeness of apply_ac_step
%apply_ac_step_complete: LEMMA 
%   unifies?(delta, append(unseen_unif_prb, seen_unif_prb)) AND all_ac_prb?(unseen_unif_prb)
%   AND well_formed?(delta) AND nice_input?(append(unseen_unif_prb, seen_unif_prb), sigma, vars2avoid)
%   AND contained?(delta, vars2avoid) AND more_general?(sigma, delta) IMPLIES
%   EXISTS ac_sol, gamma:
%      member(ac_sol, apply_ac_step(unseen_unif_prb, seen_unif_prb, sigma, vars2avoid)) AND
%      unifies?(append(gamma, delta), ac_sol`1) AND 
%      subset?(dom(gamma), difference(ac_sol`3, vars2avoid)) AND 
%      well_formed?(gamma) AND subset?(vars(img(gamma)), ac_sol`3)
%      AND more_general?(ac_sol`2, append(gamma, delta))

END apply_ac

