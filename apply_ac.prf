(apply_ac
 (input_apply_ac_TCC1 0
  (input_apply_ac_TCC1-1 nil 3882511647 ("" (subtype-tcc) nil nil)
   ((injective? const-decl "bool" functions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (input_apply_ac subtype "apply_ac.ac_results_subs"
    "(list_adt[[freshness.fresh_context, unification.unif_prb, substitution.sub]].cons?)")))
 (input_apply_ac_TCC2 0
  (input_apply_ac_TCC2-1 nil 3882511647 ("" (termination-tcc) nil nil)
   ((injective? const-decl "bool" functions nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (input_apply_ac termination
    "apply_ac.input_apply_ac(list_adt[[freshness.fresh_context, unification.unif_prb, substitution.sub]].cdr(apply_ac.ac_results_subs), apply_ac.G, apply_ac.Pu, apply_ac.Ps, apply_ac.sigma, apply_ac.V, apply_ac.PV)"
    "nil")))
 (input_apply_ac_TCC3 0
  (input_apply_ac_TCC3-1 nil 3882511647 ("" (subtype-tcc) nil nil) nil
   nil
   (input_apply_ac subtype "apply_ac.ac_results_subs"
    "(list_adt[[freshness.fresh_context, unification.unif_prb, substitution.sub]].cons?)")))
 (input_apply_ac_mem 0
  (input_apply_ac_mem-2 nil 3882532037
   ("" (induct "ac_results_subs")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("sol" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "input_apply_ac" -1)
                (("1" (expand "member" -1)
                  (("1" (prop)
                    (("1" (inst 1 "sol`1" "sol`2" "sol`3")
                      (("1" (assert)
                        (("1" (expand "member" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2"
                      (inst -2 "G" "PV" "Ps" "Pu" "V" "input_" "sigma")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "G1" "P1" "sigma1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (expand "input_apply_ac" 1)
                  (("2" (expand "member" 1)
                    (("2" (expand "member" -1)
                      (("2" (split -1)
                        (("1" (prop) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2"
                              (inst -8 "G" "PV" "Ps" "Pu" "V" "input_"
                               "sigma")
                              (("2"
                                (assert)
                                (("2"
                                  (inst 2 "G1" "P1" "sigma1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (input_apply_ac def-decl
     "list[[fresh_context, unif_prb, unif_prb, sub, finite_set[variable],
      finite_set[variable]]]" apply_ac nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (append def-decl "list[T]" list_props nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   nil)
  (input_apply_ac_mem-1 nil 3882531151
   ("" (induct "ac_results_subs")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("sol" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "input_apply_ac" -1)
                (("1" (expand "member" -1)
                  (("1" (prop)
                    (("1" (inst 1 "sol`1" "sol`2" "sol`3")
                      (("1" (assert)
                        (("1" (expand "member" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2"
                      (inst -2 "G" "PV" "Ps" "Pu" "V" "input" "sigma")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "G1" "P1" "sigma1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (expand "input_apply_ac" 1)
                  (("2" (expand "member" 1)
                    (("2" (expand "member" -1)
                      (("2" (split -1)
                        (("1" (prop) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2"
                              (inst -8 "G" "PV" "Ps" "Pu" "V" "input"
                               "sigma")
                              (("2"
                                (assert)
                                (("2"
                                  (inst 2 "G1" "P1" "sigma1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (append def-decl "list[T]" list_props nil)
    (apply_sub def-decl "unif_prb" unification nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (input_apply_ac def-decl
     "list[[fresh_context, unif_prb, unif_prb, sub, finite_set[variable],
      finite_set[variable]]]" apply_ac nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (apply_ac_input type-eq-decl nil apply_ac nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (next_input?_TCC1 0
  (next_input?_TCC1-1 nil 3882533040 ("" (subtype-tcc) nil nil) nil nil
   (next_input? subtype "apply_ac.Pu" "(list_adt[unif_pair].cons?)")))
 (next_input?_TCC2 0
  (next_input?_TCC1-1 nil 3882511647 ("" (subtype-tcc) nil nil) nil nil
   (next_input? subtype "apply_ac.t"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].ac_app?)")))
 (next_input_nice_input 0
  (next_input_nice_input-1 nil 3882533427
   ("" (skeep)
    (("" (expand "next_input?" -1)
      (("" (name-replace "G" "input1_`1")
        (("" (name-replace "Pu" "input1_`2")
          (("" (name-replace "Ps" "input1_`3")
            (("" (name-replace "sig" "input1_`4")
              (("" (name-replace "V" "input1_`5")
                (("" (name-replace "PV" "input1_`6")
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (replace -3)
                        (("1" (expand "nice_input?")
                          (("1" (expand "nice_input?")
                            (("1" (flatten)
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6)
                                (("1"
                                  (replace -1 :hide? T)
                                  (("1"
                                    (replace -1 :hide? T)
                                    (("1"
                                      (replace -1 :hide? T)
                                      (("1"
                                        (replace -1 :hide? T)
                                        (("1"
                                          (replace -1 :hide? T)
                                          (("1"
                                            (replace -1 :hide? T)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "subset?(vars(append(cdr(Pu), Ps)), vars(append(Pu, Ps)))")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -6 1))
                                                    (("1"
                                                      (expand
                                                       "disjoint?")
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "x")
                                                            (("1"
                                                              (expand
                                                               ("member"
                                                                "intersection"))
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "subset?"
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -8 1))
                                                    (("2"
                                                      (expand
                                                       "subset?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst -2 "x")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but
                                                     (-11 1))
                                                    (("3"
                                                      (expand
                                                       "well_formed?")
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst -1 "t")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (split 1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "subterms_mem_unif_prb")
                                                                      (("1"
                                                                        (rewrite
                                                                         "subterms_mem_unif_prb")
                                                                        (("1"
                                                                          (skolem
                                                                           -1
                                                                           "tS")
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "tS")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   ("member"
                                                                                    "append")
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       ("member"
                                                                        "append")
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide-all-but
                                                     (-13 1))
                                                    (("4"
                                                      (expand
                                                       "match_problem?")
                                                      (("4"
                                                        (skeep)
                                                        (("4"
                                                          (inst -2 "X")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (rewrite
                                                               "vars_args")
                                                              (("4"
                                                                (rewrite
                                                                 "vars_args")
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (inst
                                                                     2
                                                                     "t")
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (rewrite
                                                                         "member_rhs_append")
                                                                        (("4"
                                                                          (rewrite
                                                                           "member_rhs_append")
                                                                          (("4"
                                                                            (prop)
                                                                            (("4"
                                                                              (expand
                                                                               "rhs")
                                                                              (("4"
                                                                                (reveal
                                                                                 2)
                                                                                (("4"
                                                                                  (expand
                                                                                   "sec_proj"
                                                                                   3)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "member"
                                                                                     3)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 2))
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "vars"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             ("member"
                                                              "union")
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (name-replace "t" "car(Pu)`1")
                          (("2" (name-replace "s" "car(Pu)`2")
                            (("2"
                              (name-replace "lst_V"
                               "finset2list[variable](V)")
                              (("2"
                                (name-replace
                                 "ac_results"
                                 "first_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV))")
                                (("2"
                                  (name-replace
                                   "new_V"
                                   "vars(sec_proj(solve_ac(G, s, t, lst_V, ac_sym(t), PV)))")
                                  (("2"
                                    (name-replace
                                     "ac_results_subs"
                                     "inst_step(PV, G, ac_results)")
                                    (("2"
                                      (rewrite "input_apply_ac_mem")
                                      (("2"
                                        (skolem -2 ("G1" "P1" "sig1"))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "nice_input?")
                                            (("2"
                                              (reveal
                                               -7
                                               -8
                                               -9
                                               -10
                                               -11
                                               -12)
                                              (("2"
                                                (replace -1 :hide? T)
                                                (("2"
                                                  (replace -1 :hide? T)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     T)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       T)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         T)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           T)
                                                          (("2"
                                                            (replace
                                                             -3
                                                             :hide?
                                                             T)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               :hide?
                                                               T)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 :hide?
                                                                 T)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   :hide?
                                                                   T)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     :hide?
                                                                     T)
                                                                    (("2"
                                                                      (replace
                                                                       -3
                                                                       :hide?
                                                                       T)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "nice_input?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (reveal
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ac_results_subs"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inst_step_mem")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "P0")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "idempotent_append")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "inst_step_idempotent3")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "inst_step_vars_img")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -5
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ac_results"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lst_V"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("6"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("7"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("8"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("9"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (apply_ac_TCC1 0
  (apply_ac_TCC1-1 nil 3882511647
   ("" (skeep)
    (("" (typepred "input")
      (("" (expand "nice_input?")
        (("" (expand "nice_input?" -1)
          (("" (flatten)
            (("" (assert)
              (("" (replace -10 :dir rl)
                (("" (replace -11 :dir rl)
                  (("" (replace -12 :dir rl)
                    (("" (replace -13 :dir rl)
                      (("" (replace -14 :dir rl)
                        (("" (replace -15 :dir rl)
                          (("" (prop)
                            (("1" (hide-all-but (-2 1))
                              (("1"
                                (expand "disjoint?")
                                (("1"
                                  (expand "empty?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "x")
                                      (("1"
                                        (expand
                                         ("member" "intersection"))
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "vars_unif_prb")
                                            (("1"
                                              (rewrite "vars_unif_prb")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "member_unif_prb_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-4 1))
                              (("2"
                                (expand "subset?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -2 "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "vars_unif_prb")
                                        (("2"
                                          (rewrite "vars_unif_prb")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 2 "t")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "member_unif_prb_append")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-7 1))
                              (("3"
                                (expand "well_formed?")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst -1 "t")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "subterms_mem_unif_prb")
                                                (("1"
                                                  (rewrite
                                                   "subterms_mem_unif_prb")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 2 "t_1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "member_unif_prb_append")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "member_unif_prb_append")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but (-9 1))
                              (("4"
                                (expand "match_problem?")
                                (("4"
                                  (skolem 1 "x")
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (inst -2 "x")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "rhs")
                                          (("4"
                                            (rewrite "vars_args")
                                            (("4"
                                              (rewrite "vars_args")
                                              (("4"
                                                (skeep)
                                                (("4"
                                                  (inst 2 "t")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite
                                                       "sec_proj_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (append def-decl "list[T]" list_props nil)
    (vars_unif_prb formula-decl nil unification nil)
    (member_unif_prb_append formula-decl nil unification nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (match_problem? const-decl "bool" unification nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (args type-eq-decl nil term_properties nil)
    (vars_args formula-decl nil term_properties nil)
    (sec_proj_append formula-decl nil list_theory2 nil)
    (rhs const-decl "args" unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (apply_ac_input type-eq-decl nil apply_ac nil))
   nil
   (apply_ac subtype
    "(apply_ac.G, apply_ac.Ps, apply_ac.sigma, apply_ac.V, apply_ac.PV)"
    "nice_input")))
 (apply_ac_TCC2 0
  (apply_ac_TCC2-1 nil 3882511647
   ("" (skeep)
    (("" (rewrite "every_nth")
      (("" (skeep)
        (("" (typepred "i")
          (("" (expand "length" -1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((every_nth formula-decl nil list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (apply_ac subtype
    "list_adt[[freshness.fresh_context, unification.unif_prb, substitution.sub, finite_set[variable], finite_set[variable]]].null"
    "list[nice_input]")))
 (apply_ac_TCC3 0
  (apply_ac_TCC3-1 nil 3882511647 ("" (subtype-tcc) nil nil)
   ((all_ac_prb? const-decl "bool" unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (subs const-decl "term" substitution nil)
    (idempotent? const-decl "bool" substitution nil)
    (member const-decl "bool" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (contained? const-decl "bool" substitution nil)
    (well_formed? const-decl "bool" substitution nil)
    (rhs const-decl "args" unification nil)
    (match_problem? const-decl "bool" unification nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (apply_ac_input type-eq-decl nil apply_ac nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (apply_ac subtype "apply_ac.Pu" "(list_adt[unif_pair].cons?)")))
 (apply_ac_TCC4 0
  (apply_ac_TCC4-1 nil 3882511647
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "input")
        (("" (expand "nice_input?")
          (("" (expand "nice_input?")
            (("" (flatten)
              (("" (assert)
                (("" (replace -10 :dir rl :hide? T)
                  (("" (replace -10 :dir rl :hide? T)
                    (("" (replace -10 :dir rl :hide? T)
                      (("" (replace -10 :dir rl :hide? T)
                        (("" (replace -10 :dir rl :hide? T)
                          (("" (replace -10 :dir rl :hide? T)
                            ((""
                              (case "subset?(vars(append(cdr(Pu), Ps)), vars(append(Pu, Ps)))")
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 -3 1))
                                  (("1"
                                    (expand "disjoint?")
                                    (("1"
                                      (expand "empty?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -3 "x")
                                          (("1"
                                            (expand
                                             ("member" "intersection"))
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "subset?" -3)
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 -5 1))
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but (-8 1))
                                  (("3"
                                    (expand "well_formed?")
                                    (("3"
                                      (skolem 1 "t1")
                                      (("3"
                                        (inst -1 "t1")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "subterms_mem_unif_prb")
                                                  (("1"
                                                    (rewrite
                                                     "subterms_mem_unif_prb")
                                                    (("1"
                                                      (skolem -1 "t1S")
                                                      (("1"
                                                        (inst 2 "t1S")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (reveal
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 3)
                                                                (("1"
                                                                  (expand
                                                                   "member"
                                                                   3)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (reveal 1)
                                                  (("2"
                                                    (expand "append" 2)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but (-10 1))
                                  (("4"
                                    (expand "match_problem?")
                                    (("4"
                                      (skeep)
                                      (("4"
                                        (inst -2 "X")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (rewrite "vars_args")
                                            (("4"
                                              (rewrite "vars_args")
                                              (("4"
                                                (skolem -1 "t1")
                                                (("4"
                                                  (inst 2 "t1")
                                                  (("4"
                                                    (flatten)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (rewrite
                                                         "member_rhs_append")
                                                        (("4"
                                                          (rewrite
                                                           "member_rhs_append")
                                                          (("4"
                                                            (flatten)
                                                            (("4"
                                                              (prop)
                                                              (("4"
                                                                (reveal
                                                                 2)
                                                                (("4"
                                                                  (expand
                                                                   "rhs")
                                                                  (("4"
                                                                    (expand
                                                                     "sec_proj"
                                                                     3)
                                                                    (("4"
                                                                      (expand
                                                                       "member"
                                                                       3)
                                                                      (("4"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2"
                                  (expand "subset?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite* "vars_unif_prb")
                                      (("2"
                                        (skolem -1 "t1")
                                        (("2"
                                          (inst 1 "t1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (prop)
                                              (("2"
                                                (expand "append" 1)
                                                (("2"
                                                  (expand "member" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (subset? const-decl "bool" sets nil)
    (member def-decl "bool" list_props nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (member_rhs_append formula-decl nil unification nil)
    (vars_args formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (rhs const-decl "args" unification nil)
    (match_problem? const-decl "bool" unification nil)
    (subterms_mem_unif_prb formula-decl nil unification nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (vars_unif_prb formula-decl nil unification nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (unif_pair type-eq-decl nil unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (apply_ac_input type-eq-decl nil apply_ac nil))
   nil
   (apply_ac subtype
    "(apply_ac.G, list_adt[unif_pair].cdr(apply_ac.Pu), apply_ac.Ps, apply_ac.sigma, apply_ac.V, apply_ac.PV)"
    "apply_ac_input")))
 (apply_ac_TCC5 0
  (apply_ac_TCC5-1 nil 3882511647 ("" (termination-tcc) nil nil)
   ((all_ac_prb? const-decl "bool" unification nil)
    (ac_prb? const-decl "bool" unification nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (injective? const-decl "bool" functions nil)
    (match_problem? const-decl "bool" unification nil)
    (rhs const-decl "args" unification nil)
    (well_formed? const-decl "bool" substitution nil)
    (contained? const-decl "bool" substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (idempotent? const-decl "bool" substitution nil)
    (subs const-decl "term" substitution nil)
    (apply_ac_input type-eq-decl nil apply_ac nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (unif_prb type-eq-decl nil unification nil)
    (unif_pair type-eq-decl nil unification nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (apply_ac termination
    "apply_ac.apply_ac(apply_ac.G, list_adt[unif_pair].cdr(apply_ac.Pu), apply_ac.Ps, apply_ac.sigma, apply_ac.V, apply_ac.PV)"
    "nil")))
 (apply_ac_TCC6 0
  (apply_ac_TCC6-1 nil 3882511647
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "all_ac_prb?" -7)
          (("" (inst -7 "car(Pu)")
            (("" (expand "member" -7)
              (("" (assert)
                (("" (expand "ac_prb?") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_ac_prb? const-decl "bool" unification nil)
    (member def-decl "bool" list_props nil)
    (ac_prb? const-decl "bool" unification nil)
    (unif_prb type-eq-decl nil unification nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (unif_pair type-eq-decl nil unification nil)
    (variable type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (apply_ac subtype "apply_ac.t"
    "(term_adt[atom, atoms.perm, variable, f_symbol, ac_symbol].ac_app?)")))
 (apply_ac_TCC7 0
  (apply_ac_TCC7-1 nil 3882511647
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12)
            (("" (rewrite "every_nth")
              (("" (skeep)
                (("" (name-replace "input2" "nth(input_lst, i)")
                  (("" (reveal -1)
                    (("" (lemma "input_apply_ac_mem")
                      (("" (inst?)
                        (("" (inst -1 "input2")
                          (("" (replace -4 :dir rl)
                            (("" (case "member(input2, input_lst)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (hide -11 3 2)
                                    (("1"
                                      (expand "nice_input?")
                                      (("1"
                                        (replace -3 :hide? T)
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (apply_ac subtype "apply_ac.input_lst" "list[apply_ac_input]")))
 (apply_ac_TCC8 0
  (apply_ac_TCC8-1 nil 3882511647 ("" (termination-tcc) nil nil) nil
   nil
   (apply_ac termination-subtype "apply_ac.input_lst"
    "[{z: apply_ac.apply_ac_input | list_adt[unif_pair].<<(z`2, apply_ac.input`2)} -> list[nice_input]]"))))

